//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace IWorld.Admin.ExchangeService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegularlyStatusSelectType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public enum RegularlyStatusSelectType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        全部 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        未过期 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        正常 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        暂停 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        已过期 = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperateResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.ExchangeService.PaginationListOfExchangeParticipateRecordResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.ExchangeService.PaginationListOfGiftResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.ExchangeService.PaginationListOfExchangeResultp9CVq9mK))]
    public partial class OperateResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorField;
        
        private bool SuccessField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfExchangeParticipateRecordResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfExchangeParticipateRecordResultp9CVq9mK : IWorld.Admin.ExchangeService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.ExchangeService.ExchangeParticipateRecordResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.ExchangeService.ExchangeParticipateRecordResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfGiftResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfGiftResultp9CVq9mK : IWorld.Admin.ExchangeService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.ExchangeService.GiftResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.ExchangeService.GiftResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfExchangeResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfExchangeResultp9CVq9mK : IWorld.Admin.ExchangeService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.ExchangeService.ExchangeResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.ExchangeService.ExchangeResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExchangeResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class ExchangeResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AutoDeleteField;
        
        private System.DateTime BeginTimeField;
        
        private System.Collections.Generic.List<IWorld.Admin.ExchangeService.ConditionResult> ConditionsField;
        
        private int DaysField;
        
        private int EachPersonCanExchangeTheNumberOfAllField;
        
        private int EachPersonCanExchangeTheNumberOfDaysField;
        
        private int EachPersonCanExchangeTheNumberOfTimesField;
        
        private int EachPersonCanExchangeTheTimesOfAllField;
        
        private int EachPersonCanExchangeTheTimesOfDaysField;
        
        private System.DateTime EndTimeField;
        
        private int ExchangeIdField;
        
        private bool HideField;
        
        private string NameField;
        
        private int PlacesField;
        
        private System.Collections.Generic.List<IWorld.Admin.ExchangeService.PrizeResult> PrizesField;
        
        private double UnitPriceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoDelete {
            get {
                return this.AutoDeleteField;
            }
            set {
                if ((this.AutoDeleteField.Equals(value) != true)) {
                    this.AutoDeleteField = value;
                    this.RaisePropertyChanged("AutoDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BeginTime {
            get {
                return this.BeginTimeField;
            }
            set {
                if ((this.BeginTimeField.Equals(value) != true)) {
                    this.BeginTimeField = value;
                    this.RaisePropertyChanged("BeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.ExchangeService.ConditionResult> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Days {
            get {
                return this.DaysField;
            }
            set {
                if ((this.DaysField.Equals(value) != true)) {
                    this.DaysField = value;
                    this.RaisePropertyChanged("Days");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfAll {
            get {
                return this.EachPersonCanExchangeTheNumberOfAllField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfAllField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfAllField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfDays {
            get {
                return this.EachPersonCanExchangeTheNumberOfDaysField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfDaysField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfDaysField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfTimes {
            get {
                return this.EachPersonCanExchangeTheNumberOfTimesField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfTimesField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfTimesField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheTimesOfAll {
            get {
                return this.EachPersonCanExchangeTheTimesOfAllField;
            }
            set {
                if ((this.EachPersonCanExchangeTheTimesOfAllField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheTimesOfAllField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheTimesOfAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheTimesOfDays {
            get {
                return this.EachPersonCanExchangeTheTimesOfDaysField;
            }
            set {
                if ((this.EachPersonCanExchangeTheTimesOfDaysField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheTimesOfDaysField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheTimesOfDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExchangeId {
            get {
                return this.ExchangeIdField;
            }
            set {
                if ((this.ExchangeIdField.Equals(value) != true)) {
                    this.ExchangeIdField = value;
                    this.RaisePropertyChanged("ExchangeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Hide {
            get {
                return this.HideField;
            }
            set {
                if ((this.HideField.Equals(value) != true)) {
                    this.HideField = value;
                    this.RaisePropertyChanged("Hide");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Places {
            get {
                return this.PlacesField;
            }
            set {
                if ((this.PlacesField.Equals(value) != true)) {
                    this.PlacesField = value;
                    this.RaisePropertyChanged("Places");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.ExchangeService.PrizeResult> Prizes {
            get {
                return this.PrizesField;
            }
            set {
                if ((object.ReferenceEquals(this.PrizesField, value) != true)) {
                    this.PrizesField = value;
                    this.RaisePropertyChanged("Prizes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExchangeParticipateRecordResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class ExchangeParticipateRecordResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CountOfGiftField;
        
        private int ExchangeIdField;
        
        private string ExchangeNameField;
        
        private int ExchangeParticipateRecordIdField;
        
        private int OwnerIdField;
        
        private string OwnerNameField;
        
        private System.DateTime ParticipatedTimeField;
        
        private double RewardOfIntegralField;
        
        private double RewardOfMoneyField;
        
        private int SumField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountOfGift {
            get {
                return this.CountOfGiftField;
            }
            set {
                if ((this.CountOfGiftField.Equals(value) != true)) {
                    this.CountOfGiftField = value;
                    this.RaisePropertyChanged("CountOfGift");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExchangeId {
            get {
                return this.ExchangeIdField;
            }
            set {
                if ((this.ExchangeIdField.Equals(value) != true)) {
                    this.ExchangeIdField = value;
                    this.RaisePropertyChanged("ExchangeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExchangeName {
            get {
                return this.ExchangeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExchangeNameField, value) != true)) {
                    this.ExchangeNameField = value;
                    this.RaisePropertyChanged("ExchangeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExchangeParticipateRecordId {
            get {
                return this.ExchangeParticipateRecordIdField;
            }
            set {
                if ((this.ExchangeParticipateRecordIdField.Equals(value) != true)) {
                    this.ExchangeParticipateRecordIdField = value;
                    this.RaisePropertyChanged("ExchangeParticipateRecordId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ParticipatedTime {
            get {
                return this.ParticipatedTimeField;
            }
            set {
                if ((this.ParticipatedTimeField.Equals(value) != true)) {
                    this.ParticipatedTimeField = value;
                    this.RaisePropertyChanged("ParticipatedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RewardOfIntegral {
            get {
                return this.RewardOfIntegralField;
            }
            set {
                if ((this.RewardOfIntegralField.Equals(value) != true)) {
                    this.RewardOfIntegralField = value;
                    this.RaisePropertyChanged("RewardOfIntegral");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RewardOfMoney {
            get {
                return this.RewardOfMoneyField;
            }
            set {
                if ((this.RewardOfMoneyField.Equals(value) != true)) {
                    this.RewardOfMoneyField = value;
                    this.RaisePropertyChanged("RewardOfMoney");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GiftResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class GiftResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int GiftIdField;
        
        private string NameField;
        
        private double PriceField;
        
        private string RemarkField;
        
        private IWorld.Admin.ExchangeService.GiftStatus StatusField;
        
        private int SumField;
        
        private IWorld.Admin.ExchangeService.PrizeType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GiftId {
            get {
                return this.GiftIdField;
            }
            set {
                if ((this.GiftIdField.Equals(value) != true)) {
                    this.GiftIdField = value;
                    this.RaisePropertyChanged("GiftId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.ExchangeService.GiftStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.ExchangeService.PrizeType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GiftStatus", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum GiftStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        未赠送 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        已赠送 = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrizeType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum PrizeType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        人民币 = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        实物 = 201,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        积分 = 301,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConditionResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class ConditionResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ConditionIdField;
        
        private double LimitField;
        
        private IWorld.Admin.ExchangeService.ConditionType TypeField;
        
        private double UpperField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConditionId {
            get {
                return this.ConditionIdField;
            }
            set {
                if ((this.ConditionIdField.Equals(value) != true)) {
                    this.ConditionIdField = value;
                    this.RaisePropertyChanged("ConditionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.ExchangeService.ConditionType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Upper {
            get {
                return this.UpperField;
            }
            set {
                if ((this.UpperField.Equals(value) != true)) {
                    this.UpperField = value;
                    this.RaisePropertyChanged("Upper");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrizeResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PrizeResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string NameField;
        
        private double PriceField;
        
        private int PrizeIdField;
        
        private string RemarkField;
        
        private int SumField;
        
        private IWorld.Admin.ExchangeService.PrizeType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrizeId {
            get {
                return this.PrizeIdField;
            }
            set {
                if ((this.PrizeIdField.Equals(value) != true)) {
                    this.PrizeIdField = value;
                    this.RaisePropertyChanged("PrizeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.ExchangeService.PrizeType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConditionType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum ConditionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        用户组等级 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        消费量 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        注册时间 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        资金余额 = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddExchangeImport", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class AddExchangeImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AutoDeleteField;
        
        private string BeginTimeField;
        
        private System.Collections.Generic.List<IWorld.Admin.ExchangeService.EditConditionImport> ConditionsField;
        
        private int DaysField;
        
        private int EachPersonCanExchangeTheNumberOfAllField;
        
        private int EachPersonCanExchangeTheNumberOfDaysField;
        
        private int EachPersonCanExchangeTheNumberOfTimesField;
        
        private int EachPersonCanExchangeTheTimesOfAllField;
        
        private int EachPersonCanExchangeTheTimesOfDaysField;
        
        private string NameField;
        
        private int PlacesField;
        
        private System.Collections.Generic.List<IWorld.Admin.ExchangeService.EditPrizeImport> PrizesField;
        
        private double UnitPriceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoDelete {
            get {
                return this.AutoDeleteField;
            }
            set {
                if ((this.AutoDeleteField.Equals(value) != true)) {
                    this.AutoDeleteField = value;
                    this.RaisePropertyChanged("AutoDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BeginTime {
            get {
                return this.BeginTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.BeginTimeField, value) != true)) {
                    this.BeginTimeField = value;
                    this.RaisePropertyChanged("BeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.ExchangeService.EditConditionImport> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Days {
            get {
                return this.DaysField;
            }
            set {
                if ((this.DaysField.Equals(value) != true)) {
                    this.DaysField = value;
                    this.RaisePropertyChanged("Days");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfAll {
            get {
                return this.EachPersonCanExchangeTheNumberOfAllField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfAllField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfAllField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfDays {
            get {
                return this.EachPersonCanExchangeTheNumberOfDaysField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfDaysField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfDaysField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfTimes {
            get {
                return this.EachPersonCanExchangeTheNumberOfTimesField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfTimesField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfTimesField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheTimesOfAll {
            get {
                return this.EachPersonCanExchangeTheTimesOfAllField;
            }
            set {
                if ((this.EachPersonCanExchangeTheTimesOfAllField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheTimesOfAllField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheTimesOfAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheTimesOfDays {
            get {
                return this.EachPersonCanExchangeTheTimesOfDaysField;
            }
            set {
                if ((this.EachPersonCanExchangeTheTimesOfDaysField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheTimesOfDaysField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheTimesOfDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Places {
            get {
                return this.PlacesField;
            }
            set {
                if ((this.PlacesField.Equals(value) != true)) {
                    this.PlacesField = value;
                    this.RaisePropertyChanged("Places");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.ExchangeService.EditPrizeImport> Prizes {
            get {
                return this.PrizesField;
            }
            set {
                if ((object.ReferenceEquals(this.PrizesField, value) != true)) {
                    this.PrizesField = value;
                    this.RaisePropertyChanged("Prizes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditConditionImport", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class EditConditionImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double LimitField;
        
        private IWorld.Admin.ExchangeService.ConditionType TypeField;
        
        private double UpperField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.ExchangeService.ConditionType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Upper {
            get {
                return this.UpperField;
            }
            set {
                if ((this.UpperField.Equals(value) != true)) {
                    this.UpperField = value;
                    this.RaisePropertyChanged("Upper");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditPrizeImport", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class EditPrizeImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string NameField;
        
        private double PriceField;
        
        private string RemarkField;
        
        private int SumField;
        
        private IWorld.Admin.ExchangeService.PrizeType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.ExchangeService.PrizeType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditExchangeImport_Basic", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class EditExchangeImport_Basic : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AutoDeleteField;
        
        private int DaysField;
        
        private int ExchangeIdField;
        
        private bool HideField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoDelete {
            get {
                return this.AutoDeleteField;
            }
            set {
                if ((this.AutoDeleteField.Equals(value) != true)) {
                    this.AutoDeleteField = value;
                    this.RaisePropertyChanged("AutoDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Days {
            get {
                return this.DaysField;
            }
            set {
                if ((this.DaysField.Equals(value) != true)) {
                    this.DaysField = value;
                    this.RaisePropertyChanged("Days");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExchangeId {
            get {
                return this.ExchangeIdField;
            }
            set {
                if ((this.ExchangeIdField.Equals(value) != true)) {
                    this.ExchangeIdField = value;
                    this.RaisePropertyChanged("ExchangeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Hide {
            get {
                return this.HideField;
            }
            set {
                if ((this.HideField.Equals(value) != true)) {
                    this.HideField = value;
                    this.RaisePropertyChanged("Hide");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditExchangeImport", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class EditExchangeImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AutoDeleteField;
        
        private System.Collections.Generic.List<IWorld.Admin.ExchangeService.EditConditionImport> ConditionsField;
        
        private int DaysField;
        
        private int EachPersonCanExchangeTheNumberOfAllField;
        
        private int EachPersonCanExchangeTheNumberOfDaysField;
        
        private int EachPersonCanExchangeTheNumberOfTimesField;
        
        private int EachPersonCanExchangeTheTimesOfAllField;
        
        private int EachPersonCanExchangeTheTimesOfDaysField;
        
        private int ExchangeIdField;
        
        private bool HideField;
        
        private string NameField;
        
        private int PlacesField;
        
        private System.Collections.Generic.List<IWorld.Admin.ExchangeService.EditPrizeImport> PrizesField;
        
        private double UnitPriceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoDelete {
            get {
                return this.AutoDeleteField;
            }
            set {
                if ((this.AutoDeleteField.Equals(value) != true)) {
                    this.AutoDeleteField = value;
                    this.RaisePropertyChanged("AutoDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.ExchangeService.EditConditionImport> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Days {
            get {
                return this.DaysField;
            }
            set {
                if ((this.DaysField.Equals(value) != true)) {
                    this.DaysField = value;
                    this.RaisePropertyChanged("Days");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfAll {
            get {
                return this.EachPersonCanExchangeTheNumberOfAllField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfAllField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfAllField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfDays {
            get {
                return this.EachPersonCanExchangeTheNumberOfDaysField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfDaysField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfDaysField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfTimes {
            get {
                return this.EachPersonCanExchangeTheNumberOfTimesField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfTimesField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfTimesField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheTimesOfAll {
            get {
                return this.EachPersonCanExchangeTheTimesOfAllField;
            }
            set {
                if ((this.EachPersonCanExchangeTheTimesOfAllField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheTimesOfAllField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheTimesOfAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheTimesOfDays {
            get {
                return this.EachPersonCanExchangeTheTimesOfDaysField;
            }
            set {
                if ((this.EachPersonCanExchangeTheTimesOfDaysField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheTimesOfDaysField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheTimesOfDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExchangeId {
            get {
                return this.ExchangeIdField;
            }
            set {
                if ((this.ExchangeIdField.Equals(value) != true)) {
                    this.ExchangeIdField = value;
                    this.RaisePropertyChanged("ExchangeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Hide {
            get {
                return this.HideField;
            }
            set {
                if ((this.HideField.Equals(value) != true)) {
                    this.HideField = value;
                    this.RaisePropertyChanged("Hide");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Places {
            get {
                return this.PlacesField;
            }
            set {
                if ((this.PlacesField.Equals(value) != true)) {
                    this.PlacesField = value;
                    this.RaisePropertyChanged("Places");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.ExchangeService.EditPrizeImport> Prizes {
            get {
                return this.PrizesField;
            }
            set {
                if ((object.ReferenceEquals(this.PrizesField, value) != true)) {
                    this.PrizesField = value;
                    this.RaisePropertyChanged("Prizes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GiftStatusSelectType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public enum GiftStatusSelectType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        全部 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        未赠送 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        已赠送 = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExchangeService.IExchangeService")]
    public interface IExchangeService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExchangeService/GetExchangeList", ReplyAction="http://tempuri.org/IExchangeService/GetExchangeListResponse")]
        System.IAsyncResult BeginGetExchangeList(string keyword, IWorld.Admin.ExchangeService.RegularlyStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.ExchangeService.PaginationListOfExchangeResultp9CVq9mK EndGetExchangeList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExchangeService/GetParticipateRecordList", ReplyAction="http://tempuri.org/IExchangeService/GetParticipateRecordListResponse")]
        System.IAsyncResult BeginGetParticipateRecordList(int exchangeId, int ownerId, string beginTime, string endTime, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.ExchangeService.PaginationListOfExchangeParticipateRecordResultp9CVq9mK EndGetParticipateRecordList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExchangeService/AddExchange", ReplyAction="http://tempuri.org/IExchangeService/AddExchangeResponse")]
        System.IAsyncResult BeginAddExchange(IWorld.Admin.ExchangeService.AddExchangeImport import, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.ExchangeService.OperateResult EndAddExchange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExchangeService/EditExchange_Basic", ReplyAction="http://tempuri.org/IExchangeService/EditExchange_BasicResponse")]
        System.IAsyncResult BeginEditExchange_Basic(IWorld.Admin.ExchangeService.EditExchangeImport_Basic import, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.ExchangeService.OperateResult EndEditExchange_Basic(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExchangeService/EditExchange", ReplyAction="http://tempuri.org/IExchangeService/EditExchangeResponse")]
        System.IAsyncResult BeginEditExchange(IWorld.Admin.ExchangeService.EditExchangeImport import, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.ExchangeService.OperateResult EndEditExchange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExchangeService/RemoveExchange", ReplyAction="http://tempuri.org/IExchangeService/RemoveExchangeResponse")]
        System.IAsyncResult BeginRemoveExchange(int exchangeId, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.ExchangeService.OperateResult EndRemoveExchange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExchangeService/HideExchange", ReplyAction="http://tempuri.org/IExchangeService/HideExchangeResponse")]
        System.IAsyncResult BeginHideExchange(int exchangeId, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.ExchangeService.OperateResult EndHideExchange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExchangeService/ShowExchange", ReplyAction="http://tempuri.org/IExchangeService/ShowExchangeResponse")]
        System.IAsyncResult BeginShowExchange(int exchangeId, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.ExchangeService.OperateResult EndShowExchange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExchangeService/GetGiftList", ReplyAction="http://tempuri.org/IExchangeService/GetGiftListResponse")]
        System.IAsyncResult BeginGetGiftList(int exchangeId, int ownerId, IWorld.Admin.ExchangeService.GiftStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.ExchangeService.PaginationListOfGiftResultp9CVq9mK EndGetGiftList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExchangeService/HandselGift", ReplyAction="http://tempuri.org/IExchangeService/HandselGiftResponse")]
        System.IAsyncResult BeginHandselGift(int giftId, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.ExchangeService.OperateResult EndHandselGift(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExchangeServiceChannel : IWorld.Admin.ExchangeService.IExchangeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExchangeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExchangeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.ExchangeService.PaginationListOfExchangeResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.ExchangeService.PaginationListOfExchangeResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetParticipateRecordListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetParticipateRecordListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.ExchangeService.PaginationListOfExchangeParticipateRecordResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.ExchangeService.PaginationListOfExchangeParticipateRecordResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.ExchangeService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.ExchangeService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditExchange_BasicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditExchange_BasicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.ExchangeService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.ExchangeService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.ExchangeService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.ExchangeService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.ExchangeService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.ExchangeService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HideExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public HideExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.ExchangeService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.ExchangeService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShowExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShowExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.ExchangeService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.ExchangeService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGiftListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGiftListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.ExchangeService.PaginationListOfGiftResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.ExchangeService.PaginationListOfGiftResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HandselGiftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public HandselGiftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.ExchangeService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.ExchangeService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExchangeServiceClient : System.ServiceModel.ClientBase<IWorld.Admin.ExchangeService.IExchangeService>, IWorld.Admin.ExchangeService.IExchangeService {
        
        private BeginOperationDelegate onBeginGetExchangeListDelegate;
        
        private EndOperationDelegate onEndGetExchangeListDelegate;
        
        private System.Threading.SendOrPostCallback onGetExchangeListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetParticipateRecordListDelegate;
        
        private EndOperationDelegate onEndGetParticipateRecordListDelegate;
        
        private System.Threading.SendOrPostCallback onGetParticipateRecordListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddExchangeDelegate;
        
        private EndOperationDelegate onEndAddExchangeDelegate;
        
        private System.Threading.SendOrPostCallback onAddExchangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditExchange_BasicDelegate;
        
        private EndOperationDelegate onEndEditExchange_BasicDelegate;
        
        private System.Threading.SendOrPostCallback onEditExchange_BasicCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditExchangeDelegate;
        
        private EndOperationDelegate onEndEditExchangeDelegate;
        
        private System.Threading.SendOrPostCallback onEditExchangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveExchangeDelegate;
        
        private EndOperationDelegate onEndRemoveExchangeDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveExchangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginHideExchangeDelegate;
        
        private EndOperationDelegate onEndHideExchangeDelegate;
        
        private System.Threading.SendOrPostCallback onHideExchangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginShowExchangeDelegate;
        
        private EndOperationDelegate onEndShowExchangeDelegate;
        
        private System.Threading.SendOrPostCallback onShowExchangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGiftListDelegate;
        
        private EndOperationDelegate onEndGetGiftListDelegate;
        
        private System.Threading.SendOrPostCallback onGetGiftListCompletedDelegate;
        
        private BeginOperationDelegate onBeginHandselGiftDelegate;
        
        private EndOperationDelegate onEndHandselGiftDelegate;
        
        private System.Threading.SendOrPostCallback onHandselGiftCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ExchangeServiceClient() {
        }
        
        public ExchangeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExchangeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExchangeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExchangeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetExchangeListCompletedEventArgs> GetExchangeListCompleted;
        
        public event System.EventHandler<GetParticipateRecordListCompletedEventArgs> GetParticipateRecordListCompleted;
        
        public event System.EventHandler<AddExchangeCompletedEventArgs> AddExchangeCompleted;
        
        public event System.EventHandler<EditExchange_BasicCompletedEventArgs> EditExchange_BasicCompleted;
        
        public event System.EventHandler<EditExchangeCompletedEventArgs> EditExchangeCompleted;
        
        public event System.EventHandler<RemoveExchangeCompletedEventArgs> RemoveExchangeCompleted;
        
        public event System.EventHandler<HideExchangeCompletedEventArgs> HideExchangeCompleted;
        
        public event System.EventHandler<ShowExchangeCompletedEventArgs> ShowExchangeCompleted;
        
        public event System.EventHandler<GetGiftListCompletedEventArgs> GetGiftListCompleted;
        
        public event System.EventHandler<HandselGiftCompletedEventArgs> HandselGiftCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.ExchangeService.IExchangeService.BeginGetExchangeList(string keyword, IWorld.Admin.ExchangeService.RegularlyStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExchangeList(keyword, status, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.ExchangeService.PaginationListOfExchangeResultp9CVq9mK IWorld.Admin.ExchangeService.IExchangeService.EndGetExchangeList(System.IAsyncResult result) {
            return base.Channel.EndGetExchangeList(result);
        }
        
        private System.IAsyncResult OnBeginGetExchangeList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyword = ((string)(inValues[0]));
            IWorld.Admin.ExchangeService.RegularlyStatusSelectType status = ((IWorld.Admin.ExchangeService.RegularlyStatusSelectType)(inValues[1]));
            int page = ((int)(inValues[2]));
            string token = ((string)(inValues[3]));
            return ((IWorld.Admin.ExchangeService.IExchangeService)(this)).BeginGetExchangeList(keyword, status, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetExchangeList(System.IAsyncResult result) {
            IWorld.Admin.ExchangeService.PaginationListOfExchangeResultp9CVq9mK retVal = ((IWorld.Admin.ExchangeService.IExchangeService)(this)).EndGetExchangeList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExchangeListCompleted(object state) {
            if ((this.GetExchangeListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExchangeListCompleted(this, new GetExchangeListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExchangeListAsync(string keyword, IWorld.Admin.ExchangeService.RegularlyStatusSelectType status, int page, string token) {
            this.GetExchangeListAsync(keyword, status, page, token, null);
        }
        
        public void GetExchangeListAsync(string keyword, IWorld.Admin.ExchangeService.RegularlyStatusSelectType status, int page, string token, object userState) {
            if ((this.onBeginGetExchangeListDelegate == null)) {
                this.onBeginGetExchangeListDelegate = new BeginOperationDelegate(this.OnBeginGetExchangeList);
            }
            if ((this.onEndGetExchangeListDelegate == null)) {
                this.onEndGetExchangeListDelegate = new EndOperationDelegate(this.OnEndGetExchangeList);
            }
            if ((this.onGetExchangeListCompletedDelegate == null)) {
                this.onGetExchangeListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExchangeListCompleted);
            }
            base.InvokeAsync(this.onBeginGetExchangeListDelegate, new object[] {
                        keyword,
                        status,
                        page,
                        token}, this.onEndGetExchangeListDelegate, this.onGetExchangeListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.ExchangeService.IExchangeService.BeginGetParticipateRecordList(int exchangeId, int ownerId, string beginTime, string endTime, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetParticipateRecordList(exchangeId, ownerId, beginTime, endTime, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.ExchangeService.PaginationListOfExchangeParticipateRecordResultp9CVq9mK IWorld.Admin.ExchangeService.IExchangeService.EndGetParticipateRecordList(System.IAsyncResult result) {
            return base.Channel.EndGetParticipateRecordList(result);
        }
        
        private System.IAsyncResult OnBeginGetParticipateRecordList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int exchangeId = ((int)(inValues[0]));
            int ownerId = ((int)(inValues[1]));
            string beginTime = ((string)(inValues[2]));
            string endTime = ((string)(inValues[3]));
            int page = ((int)(inValues[4]));
            string token = ((string)(inValues[5]));
            return ((IWorld.Admin.ExchangeService.IExchangeService)(this)).BeginGetParticipateRecordList(exchangeId, ownerId, beginTime, endTime, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetParticipateRecordList(System.IAsyncResult result) {
            IWorld.Admin.ExchangeService.PaginationListOfExchangeParticipateRecordResultp9CVq9mK retVal = ((IWorld.Admin.ExchangeService.IExchangeService)(this)).EndGetParticipateRecordList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetParticipateRecordListCompleted(object state) {
            if ((this.GetParticipateRecordListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetParticipateRecordListCompleted(this, new GetParticipateRecordListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetParticipateRecordListAsync(int exchangeId, int ownerId, string beginTime, string endTime, int page, string token) {
            this.GetParticipateRecordListAsync(exchangeId, ownerId, beginTime, endTime, page, token, null);
        }
        
        public void GetParticipateRecordListAsync(int exchangeId, int ownerId, string beginTime, string endTime, int page, string token, object userState) {
            if ((this.onBeginGetParticipateRecordListDelegate == null)) {
                this.onBeginGetParticipateRecordListDelegate = new BeginOperationDelegate(this.OnBeginGetParticipateRecordList);
            }
            if ((this.onEndGetParticipateRecordListDelegate == null)) {
                this.onEndGetParticipateRecordListDelegate = new EndOperationDelegate(this.OnEndGetParticipateRecordList);
            }
            if ((this.onGetParticipateRecordListCompletedDelegate == null)) {
                this.onGetParticipateRecordListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetParticipateRecordListCompleted);
            }
            base.InvokeAsync(this.onBeginGetParticipateRecordListDelegate, new object[] {
                        exchangeId,
                        ownerId,
                        beginTime,
                        endTime,
                        page,
                        token}, this.onEndGetParticipateRecordListDelegate, this.onGetParticipateRecordListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.ExchangeService.IExchangeService.BeginAddExchange(IWorld.Admin.ExchangeService.AddExchangeImport import, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddExchange(import, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.ExchangeService.OperateResult IWorld.Admin.ExchangeService.IExchangeService.EndAddExchange(System.IAsyncResult result) {
            return base.Channel.EndAddExchange(result);
        }
        
        private System.IAsyncResult OnBeginAddExchange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IWorld.Admin.ExchangeService.AddExchangeImport import = ((IWorld.Admin.ExchangeService.AddExchangeImport)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.ExchangeService.IExchangeService)(this)).BeginAddExchange(import, token, callback, asyncState);
        }
        
        private object[] OnEndAddExchange(System.IAsyncResult result) {
            IWorld.Admin.ExchangeService.OperateResult retVal = ((IWorld.Admin.ExchangeService.IExchangeService)(this)).EndAddExchange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddExchangeCompleted(object state) {
            if ((this.AddExchangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddExchangeCompleted(this, new AddExchangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddExchangeAsync(IWorld.Admin.ExchangeService.AddExchangeImport import, string token) {
            this.AddExchangeAsync(import, token, null);
        }
        
        public void AddExchangeAsync(IWorld.Admin.ExchangeService.AddExchangeImport import, string token, object userState) {
            if ((this.onBeginAddExchangeDelegate == null)) {
                this.onBeginAddExchangeDelegate = new BeginOperationDelegate(this.OnBeginAddExchange);
            }
            if ((this.onEndAddExchangeDelegate == null)) {
                this.onEndAddExchangeDelegate = new EndOperationDelegate(this.OnEndAddExchange);
            }
            if ((this.onAddExchangeCompletedDelegate == null)) {
                this.onAddExchangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddExchangeCompleted);
            }
            base.InvokeAsync(this.onBeginAddExchangeDelegate, new object[] {
                        import,
                        token}, this.onEndAddExchangeDelegate, this.onAddExchangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.ExchangeService.IExchangeService.BeginEditExchange_Basic(IWorld.Admin.ExchangeService.EditExchangeImport_Basic import, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditExchange_Basic(import, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.ExchangeService.OperateResult IWorld.Admin.ExchangeService.IExchangeService.EndEditExchange_Basic(System.IAsyncResult result) {
            return base.Channel.EndEditExchange_Basic(result);
        }
        
        private System.IAsyncResult OnBeginEditExchange_Basic(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IWorld.Admin.ExchangeService.EditExchangeImport_Basic import = ((IWorld.Admin.ExchangeService.EditExchangeImport_Basic)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.ExchangeService.IExchangeService)(this)).BeginEditExchange_Basic(import, token, callback, asyncState);
        }
        
        private object[] OnEndEditExchange_Basic(System.IAsyncResult result) {
            IWorld.Admin.ExchangeService.OperateResult retVal = ((IWorld.Admin.ExchangeService.IExchangeService)(this)).EndEditExchange_Basic(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditExchange_BasicCompleted(object state) {
            if ((this.EditExchange_BasicCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditExchange_BasicCompleted(this, new EditExchange_BasicCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditExchange_BasicAsync(IWorld.Admin.ExchangeService.EditExchangeImport_Basic import, string token) {
            this.EditExchange_BasicAsync(import, token, null);
        }
        
        public void EditExchange_BasicAsync(IWorld.Admin.ExchangeService.EditExchangeImport_Basic import, string token, object userState) {
            if ((this.onBeginEditExchange_BasicDelegate == null)) {
                this.onBeginEditExchange_BasicDelegate = new BeginOperationDelegate(this.OnBeginEditExchange_Basic);
            }
            if ((this.onEndEditExchange_BasicDelegate == null)) {
                this.onEndEditExchange_BasicDelegate = new EndOperationDelegate(this.OnEndEditExchange_Basic);
            }
            if ((this.onEditExchange_BasicCompletedDelegate == null)) {
                this.onEditExchange_BasicCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditExchange_BasicCompleted);
            }
            base.InvokeAsync(this.onBeginEditExchange_BasicDelegate, new object[] {
                        import,
                        token}, this.onEndEditExchange_BasicDelegate, this.onEditExchange_BasicCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.ExchangeService.IExchangeService.BeginEditExchange(IWorld.Admin.ExchangeService.EditExchangeImport import, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditExchange(import, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.ExchangeService.OperateResult IWorld.Admin.ExchangeService.IExchangeService.EndEditExchange(System.IAsyncResult result) {
            return base.Channel.EndEditExchange(result);
        }
        
        private System.IAsyncResult OnBeginEditExchange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IWorld.Admin.ExchangeService.EditExchangeImport import = ((IWorld.Admin.ExchangeService.EditExchangeImport)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.ExchangeService.IExchangeService)(this)).BeginEditExchange(import, token, callback, asyncState);
        }
        
        private object[] OnEndEditExchange(System.IAsyncResult result) {
            IWorld.Admin.ExchangeService.OperateResult retVal = ((IWorld.Admin.ExchangeService.IExchangeService)(this)).EndEditExchange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditExchangeCompleted(object state) {
            if ((this.EditExchangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditExchangeCompleted(this, new EditExchangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditExchangeAsync(IWorld.Admin.ExchangeService.EditExchangeImport import, string token) {
            this.EditExchangeAsync(import, token, null);
        }
        
        public void EditExchangeAsync(IWorld.Admin.ExchangeService.EditExchangeImport import, string token, object userState) {
            if ((this.onBeginEditExchangeDelegate == null)) {
                this.onBeginEditExchangeDelegate = new BeginOperationDelegate(this.OnBeginEditExchange);
            }
            if ((this.onEndEditExchangeDelegate == null)) {
                this.onEndEditExchangeDelegate = new EndOperationDelegate(this.OnEndEditExchange);
            }
            if ((this.onEditExchangeCompletedDelegate == null)) {
                this.onEditExchangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditExchangeCompleted);
            }
            base.InvokeAsync(this.onBeginEditExchangeDelegate, new object[] {
                        import,
                        token}, this.onEndEditExchangeDelegate, this.onEditExchangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.ExchangeService.IExchangeService.BeginRemoveExchange(int exchangeId, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveExchange(exchangeId, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.ExchangeService.OperateResult IWorld.Admin.ExchangeService.IExchangeService.EndRemoveExchange(System.IAsyncResult result) {
            return base.Channel.EndRemoveExchange(result);
        }
        
        private System.IAsyncResult OnBeginRemoveExchange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int exchangeId = ((int)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.ExchangeService.IExchangeService)(this)).BeginRemoveExchange(exchangeId, token, callback, asyncState);
        }
        
        private object[] OnEndRemoveExchange(System.IAsyncResult result) {
            IWorld.Admin.ExchangeService.OperateResult retVal = ((IWorld.Admin.ExchangeService.IExchangeService)(this)).EndRemoveExchange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveExchangeCompleted(object state) {
            if ((this.RemoveExchangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveExchangeCompleted(this, new RemoveExchangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveExchangeAsync(int exchangeId, string token) {
            this.RemoveExchangeAsync(exchangeId, token, null);
        }
        
        public void RemoveExchangeAsync(int exchangeId, string token, object userState) {
            if ((this.onBeginRemoveExchangeDelegate == null)) {
                this.onBeginRemoveExchangeDelegate = new BeginOperationDelegate(this.OnBeginRemoveExchange);
            }
            if ((this.onEndRemoveExchangeDelegate == null)) {
                this.onEndRemoveExchangeDelegate = new EndOperationDelegate(this.OnEndRemoveExchange);
            }
            if ((this.onRemoveExchangeCompletedDelegate == null)) {
                this.onRemoveExchangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveExchangeCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveExchangeDelegate, new object[] {
                        exchangeId,
                        token}, this.onEndRemoveExchangeDelegate, this.onRemoveExchangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.ExchangeService.IExchangeService.BeginHideExchange(int exchangeId, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHideExchange(exchangeId, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.ExchangeService.OperateResult IWorld.Admin.ExchangeService.IExchangeService.EndHideExchange(System.IAsyncResult result) {
            return base.Channel.EndHideExchange(result);
        }
        
        private System.IAsyncResult OnBeginHideExchange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int exchangeId = ((int)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.ExchangeService.IExchangeService)(this)).BeginHideExchange(exchangeId, token, callback, asyncState);
        }
        
        private object[] OnEndHideExchange(System.IAsyncResult result) {
            IWorld.Admin.ExchangeService.OperateResult retVal = ((IWorld.Admin.ExchangeService.IExchangeService)(this)).EndHideExchange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnHideExchangeCompleted(object state) {
            if ((this.HideExchangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HideExchangeCompleted(this, new HideExchangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HideExchangeAsync(int exchangeId, string token) {
            this.HideExchangeAsync(exchangeId, token, null);
        }
        
        public void HideExchangeAsync(int exchangeId, string token, object userState) {
            if ((this.onBeginHideExchangeDelegate == null)) {
                this.onBeginHideExchangeDelegate = new BeginOperationDelegate(this.OnBeginHideExchange);
            }
            if ((this.onEndHideExchangeDelegate == null)) {
                this.onEndHideExchangeDelegate = new EndOperationDelegate(this.OnEndHideExchange);
            }
            if ((this.onHideExchangeCompletedDelegate == null)) {
                this.onHideExchangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHideExchangeCompleted);
            }
            base.InvokeAsync(this.onBeginHideExchangeDelegate, new object[] {
                        exchangeId,
                        token}, this.onEndHideExchangeDelegate, this.onHideExchangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.ExchangeService.IExchangeService.BeginShowExchange(int exchangeId, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShowExchange(exchangeId, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.ExchangeService.OperateResult IWorld.Admin.ExchangeService.IExchangeService.EndShowExchange(System.IAsyncResult result) {
            return base.Channel.EndShowExchange(result);
        }
        
        private System.IAsyncResult OnBeginShowExchange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int exchangeId = ((int)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.ExchangeService.IExchangeService)(this)).BeginShowExchange(exchangeId, token, callback, asyncState);
        }
        
        private object[] OnEndShowExchange(System.IAsyncResult result) {
            IWorld.Admin.ExchangeService.OperateResult retVal = ((IWorld.Admin.ExchangeService.IExchangeService)(this)).EndShowExchange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnShowExchangeCompleted(object state) {
            if ((this.ShowExchangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShowExchangeCompleted(this, new ShowExchangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShowExchangeAsync(int exchangeId, string token) {
            this.ShowExchangeAsync(exchangeId, token, null);
        }
        
        public void ShowExchangeAsync(int exchangeId, string token, object userState) {
            if ((this.onBeginShowExchangeDelegate == null)) {
                this.onBeginShowExchangeDelegate = new BeginOperationDelegate(this.OnBeginShowExchange);
            }
            if ((this.onEndShowExchangeDelegate == null)) {
                this.onEndShowExchangeDelegate = new EndOperationDelegate(this.OnEndShowExchange);
            }
            if ((this.onShowExchangeCompletedDelegate == null)) {
                this.onShowExchangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShowExchangeCompleted);
            }
            base.InvokeAsync(this.onBeginShowExchangeDelegate, new object[] {
                        exchangeId,
                        token}, this.onEndShowExchangeDelegate, this.onShowExchangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.ExchangeService.IExchangeService.BeginGetGiftList(int exchangeId, int ownerId, IWorld.Admin.ExchangeService.GiftStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGiftList(exchangeId, ownerId, status, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.ExchangeService.PaginationListOfGiftResultp9CVq9mK IWorld.Admin.ExchangeService.IExchangeService.EndGetGiftList(System.IAsyncResult result) {
            return base.Channel.EndGetGiftList(result);
        }
        
        private System.IAsyncResult OnBeginGetGiftList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int exchangeId = ((int)(inValues[0]));
            int ownerId = ((int)(inValues[1]));
            IWorld.Admin.ExchangeService.GiftStatusSelectType status = ((IWorld.Admin.ExchangeService.GiftStatusSelectType)(inValues[2]));
            int page = ((int)(inValues[3]));
            string token = ((string)(inValues[4]));
            return ((IWorld.Admin.ExchangeService.IExchangeService)(this)).BeginGetGiftList(exchangeId, ownerId, status, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetGiftList(System.IAsyncResult result) {
            IWorld.Admin.ExchangeService.PaginationListOfGiftResultp9CVq9mK retVal = ((IWorld.Admin.ExchangeService.IExchangeService)(this)).EndGetGiftList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGiftListCompleted(object state) {
            if ((this.GetGiftListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGiftListCompleted(this, new GetGiftListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGiftListAsync(int exchangeId, int ownerId, IWorld.Admin.ExchangeService.GiftStatusSelectType status, int page, string token) {
            this.GetGiftListAsync(exchangeId, ownerId, status, page, token, null);
        }
        
        public void GetGiftListAsync(int exchangeId, int ownerId, IWorld.Admin.ExchangeService.GiftStatusSelectType status, int page, string token, object userState) {
            if ((this.onBeginGetGiftListDelegate == null)) {
                this.onBeginGetGiftListDelegate = new BeginOperationDelegate(this.OnBeginGetGiftList);
            }
            if ((this.onEndGetGiftListDelegate == null)) {
                this.onEndGetGiftListDelegate = new EndOperationDelegate(this.OnEndGetGiftList);
            }
            if ((this.onGetGiftListCompletedDelegate == null)) {
                this.onGetGiftListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGiftListCompleted);
            }
            base.InvokeAsync(this.onBeginGetGiftListDelegate, new object[] {
                        exchangeId,
                        ownerId,
                        status,
                        page,
                        token}, this.onEndGetGiftListDelegate, this.onGetGiftListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.ExchangeService.IExchangeService.BeginHandselGift(int giftId, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHandselGift(giftId, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.ExchangeService.OperateResult IWorld.Admin.ExchangeService.IExchangeService.EndHandselGift(System.IAsyncResult result) {
            return base.Channel.EndHandselGift(result);
        }
        
        private System.IAsyncResult OnBeginHandselGift(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int giftId = ((int)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.ExchangeService.IExchangeService)(this)).BeginHandselGift(giftId, token, callback, asyncState);
        }
        
        private object[] OnEndHandselGift(System.IAsyncResult result) {
            IWorld.Admin.ExchangeService.OperateResult retVal = ((IWorld.Admin.ExchangeService.IExchangeService)(this)).EndHandselGift(result);
            return new object[] {
                    retVal};
        }
        
        private void OnHandselGiftCompleted(object state) {
            if ((this.HandselGiftCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HandselGiftCompleted(this, new HandselGiftCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HandselGiftAsync(int giftId, string token) {
            this.HandselGiftAsync(giftId, token, null);
        }
        
        public void HandselGiftAsync(int giftId, string token, object userState) {
            if ((this.onBeginHandselGiftDelegate == null)) {
                this.onBeginHandselGiftDelegate = new BeginOperationDelegate(this.OnBeginHandselGift);
            }
            if ((this.onEndHandselGiftDelegate == null)) {
                this.onEndHandselGiftDelegate = new EndOperationDelegate(this.OnEndHandselGift);
            }
            if ((this.onHandselGiftCompletedDelegate == null)) {
                this.onHandselGiftCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHandselGiftCompleted);
            }
            base.InvokeAsync(this.onBeginHandselGiftDelegate, new object[] {
                        giftId,
                        token}, this.onEndHandselGiftDelegate, this.onHandselGiftCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IWorld.Admin.ExchangeService.IExchangeService CreateChannel() {
            return new ExchangeServiceClientChannel(this);
        }
        
        private class ExchangeServiceClientChannel : ChannelBase<IWorld.Admin.ExchangeService.IExchangeService>, IWorld.Admin.ExchangeService.IExchangeService {
            
            public ExchangeServiceClientChannel(System.ServiceModel.ClientBase<IWorld.Admin.ExchangeService.IExchangeService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetExchangeList(string keyword, IWorld.Admin.ExchangeService.RegularlyStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = keyword;
                _args[1] = status;
                _args[2] = page;
                _args[3] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetExchangeList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.ExchangeService.PaginationListOfExchangeResultp9CVq9mK EndGetExchangeList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.ExchangeService.PaginationListOfExchangeResultp9CVq9mK _result = ((IWorld.Admin.ExchangeService.PaginationListOfExchangeResultp9CVq9mK)(base.EndInvoke("GetExchangeList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetParticipateRecordList(int exchangeId, int ownerId, string beginTime, string endTime, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = exchangeId;
                _args[1] = ownerId;
                _args[2] = beginTime;
                _args[3] = endTime;
                _args[4] = page;
                _args[5] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetParticipateRecordList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.ExchangeService.PaginationListOfExchangeParticipateRecordResultp9CVq9mK EndGetParticipateRecordList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.ExchangeService.PaginationListOfExchangeParticipateRecordResultp9CVq9mK _result = ((IWorld.Admin.ExchangeService.PaginationListOfExchangeParticipateRecordResultp9CVq9mK)(base.EndInvoke("GetParticipateRecordList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddExchange(IWorld.Admin.ExchangeService.AddExchangeImport import, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = import;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("AddExchange", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.ExchangeService.OperateResult EndAddExchange(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.ExchangeService.OperateResult _result = ((IWorld.Admin.ExchangeService.OperateResult)(base.EndInvoke("AddExchange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditExchange_Basic(IWorld.Admin.ExchangeService.EditExchangeImport_Basic import, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = import;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("EditExchange_Basic", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.ExchangeService.OperateResult EndEditExchange_Basic(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.ExchangeService.OperateResult _result = ((IWorld.Admin.ExchangeService.OperateResult)(base.EndInvoke("EditExchange_Basic", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditExchange(IWorld.Admin.ExchangeService.EditExchangeImport import, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = import;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("EditExchange", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.ExchangeService.OperateResult EndEditExchange(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.ExchangeService.OperateResult _result = ((IWorld.Admin.ExchangeService.OperateResult)(base.EndInvoke("EditExchange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveExchange(int exchangeId, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = exchangeId;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("RemoveExchange", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.ExchangeService.OperateResult EndRemoveExchange(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.ExchangeService.OperateResult _result = ((IWorld.Admin.ExchangeService.OperateResult)(base.EndInvoke("RemoveExchange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginHideExchange(int exchangeId, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = exchangeId;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("HideExchange", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.ExchangeService.OperateResult EndHideExchange(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.ExchangeService.OperateResult _result = ((IWorld.Admin.ExchangeService.OperateResult)(base.EndInvoke("HideExchange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginShowExchange(int exchangeId, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = exchangeId;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("ShowExchange", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.ExchangeService.OperateResult EndShowExchange(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.ExchangeService.OperateResult _result = ((IWorld.Admin.ExchangeService.OperateResult)(base.EndInvoke("ShowExchange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGiftList(int exchangeId, int ownerId, IWorld.Admin.ExchangeService.GiftStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = exchangeId;
                _args[1] = ownerId;
                _args[2] = status;
                _args[3] = page;
                _args[4] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetGiftList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.ExchangeService.PaginationListOfGiftResultp9CVq9mK EndGetGiftList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.ExchangeService.PaginationListOfGiftResultp9CVq9mK _result = ((IWorld.Admin.ExchangeService.PaginationListOfGiftResultp9CVq9mK)(base.EndInvoke("GetGiftList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginHandselGift(int giftId, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = giftId;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("HandselGift", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.ExchangeService.OperateResult EndHandselGift(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.ExchangeService.OperateResult _result = ((IWorld.Admin.ExchangeService.OperateResult)(base.EndInvoke("HandselGift", _args, result)));
                return _result;
            }
        }
    }
}
