//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace IWorld.Admin.CollectionService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CollectionResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class CollectionResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KeyField;
        
        private string MessageField;
        
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CollectionService.ICollectionService")]
    public interface ICollectionService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICollectionService/GetCollectionResult", ReplyAction="http://tempuri.org/ICollectionService/GetCollectionResultResponse")]
        System.IAsyncResult BeginGetCollectionResult(string token, string key, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<IWorld.Admin.CollectionService.CollectionResult> EndGetCollectionResult(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICollectionServiceChannel : IWorld.Admin.CollectionService.ICollectionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCollectionResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCollectionResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<IWorld.Admin.CollectionService.CollectionResult> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<IWorld.Admin.CollectionService.CollectionResult>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CollectionServiceClient : System.ServiceModel.ClientBase<IWorld.Admin.CollectionService.ICollectionService>, IWorld.Admin.CollectionService.ICollectionService {
        
        private BeginOperationDelegate onBeginGetCollectionResultDelegate;
        
        private EndOperationDelegate onEndGetCollectionResultDelegate;
        
        private System.Threading.SendOrPostCallback onGetCollectionResultCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CollectionServiceClient() {
        }
        
        public CollectionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CollectionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CollectionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CollectionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetCollectionResultCompletedEventArgs> GetCollectionResultCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.CollectionService.ICollectionService.BeginGetCollectionResult(string token, string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCollectionResult(token, key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<IWorld.Admin.CollectionService.CollectionResult> IWorld.Admin.CollectionService.ICollectionService.EndGetCollectionResult(System.IAsyncResult result) {
            return base.Channel.EndGetCollectionResult(result);
        }
        
        private System.IAsyncResult OnBeginGetCollectionResult(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            string key = ((string)(inValues[1]));
            return ((IWorld.Admin.CollectionService.ICollectionService)(this)).BeginGetCollectionResult(token, key, callback, asyncState);
        }
        
        private object[] OnEndGetCollectionResult(System.IAsyncResult result) {
            System.Collections.Generic.List<IWorld.Admin.CollectionService.CollectionResult> retVal = ((IWorld.Admin.CollectionService.ICollectionService)(this)).EndGetCollectionResult(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCollectionResultCompleted(object state) {
            if ((this.GetCollectionResultCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCollectionResultCompleted(this, new GetCollectionResultCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCollectionResultAsync(string token, string key) {
            this.GetCollectionResultAsync(token, key, null);
        }
        
        public void GetCollectionResultAsync(string token, string key, object userState) {
            if ((this.onBeginGetCollectionResultDelegate == null)) {
                this.onBeginGetCollectionResultDelegate = new BeginOperationDelegate(this.OnBeginGetCollectionResult);
            }
            if ((this.onEndGetCollectionResultDelegate == null)) {
                this.onEndGetCollectionResultDelegate = new EndOperationDelegate(this.OnEndGetCollectionResult);
            }
            if ((this.onGetCollectionResultCompletedDelegate == null)) {
                this.onGetCollectionResultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCollectionResultCompleted);
            }
            base.InvokeAsync(this.onBeginGetCollectionResultDelegate, new object[] {
                        token,
                        key}, this.onEndGetCollectionResultDelegate, this.onGetCollectionResultCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IWorld.Admin.CollectionService.ICollectionService CreateChannel() {
            return new CollectionServiceClientChannel(this);
        }
        
        private class CollectionServiceClientChannel : ChannelBase<IWorld.Admin.CollectionService.ICollectionService>, IWorld.Admin.CollectionService.ICollectionService {
            
            public CollectionServiceClientChannel(System.ServiceModel.ClientBase<IWorld.Admin.CollectionService.ICollectionService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetCollectionResult(string token, string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = token;
                _args[1] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetCollectionResult", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<IWorld.Admin.CollectionService.CollectionResult> EndGetCollectionResult(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<IWorld.Admin.CollectionService.CollectionResult> _result = ((System.Collections.Generic.List<IWorld.Admin.CollectionService.CollectionResult>)(base.EndInvoke("GetCollectionResult", _args, result)));
                return _result;
            }
        }
    }
}
