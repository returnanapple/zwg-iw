//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace IWorld.Client.ActivityService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperateResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Client.ActivityService.PaginationListOfExchangeActivitiesResultL_PYu6_SAe))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Client.ActivityService.PaginationListOfNormalActivitiesResultL_PYu6_SAe))]
    public partial class OperateResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorField;
        
        private bool SuccessField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfExchangeActivitiesResultL_PYu6_SAe", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    public partial class PaginationListOfExchangeActivitiesResultL_PYu6_SAe : IWorld.Client.ActivityService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Client.ActivityService.ExchangeActivitiesResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Client.ActivityService.ExchangeActivitiesResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfNormalActivitiesResultL_PYu6_SAe", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    public partial class PaginationListOfNormalActivitiesResultL_PYu6_SAe : IWorld.Client.ActivityService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Client.ActivityService.NormalActivitiesResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Client.ActivityService.NormalActivitiesResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NormalActivitiesResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    public partial class NormalActivitiesResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime BeginTimeField;
        
        private System.Collections.Generic.List<IWorld.Client.ActivityService.ConditionResult> ConditionsField;
        
        private System.DateTime EndTimeField;
        
        private double MaxRestrictionValuesField;
        
        private double MinRestrictionValueField;
        
        private double RewardField;
        
        private IWorld.Client.ActivityService.ActivityRewardType RewardTypeField;
        
        private bool RewardValueIsAbsoluteField;
        
        private string TitleField;
        
        private IWorld.Client.ActivityService.ActivityType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BeginTime {
            get {
                return this.BeginTimeField;
            }
            set {
                if ((this.BeginTimeField.Equals(value) != true)) {
                    this.BeginTimeField = value;
                    this.RaisePropertyChanged("BeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Client.ActivityService.ConditionResult> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxRestrictionValues {
            get {
                return this.MaxRestrictionValuesField;
            }
            set {
                if ((this.MaxRestrictionValuesField.Equals(value) != true)) {
                    this.MaxRestrictionValuesField = value;
                    this.RaisePropertyChanged("MaxRestrictionValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinRestrictionValue {
            get {
                return this.MinRestrictionValueField;
            }
            set {
                if ((this.MinRestrictionValueField.Equals(value) != true)) {
                    this.MinRestrictionValueField = value;
                    this.RaisePropertyChanged("MinRestrictionValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Reward {
            get {
                return this.RewardField;
            }
            set {
                if ((this.RewardField.Equals(value) != true)) {
                    this.RewardField = value;
                    this.RaisePropertyChanged("Reward");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Client.ActivityService.ActivityRewardType RewardType {
            get {
                return this.RewardTypeField;
            }
            set {
                if ((this.RewardTypeField.Equals(value) != true)) {
                    this.RewardTypeField = value;
                    this.RaisePropertyChanged("RewardType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RewardValueIsAbsolute {
            get {
                return this.RewardValueIsAbsoluteField;
            }
            set {
                if ((this.RewardValueIsAbsoluteField.Equals(value) != true)) {
                    this.RewardValueIsAbsoluteField = value;
                    this.RaisePropertyChanged("RewardValueIsAbsolute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Client.ActivityService.ActivityType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExchangeActivitiesResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    public partial class ExchangeActivitiesResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime BeginTimeField;
        
        private System.Collections.Generic.List<IWorld.Client.ActivityService.ConditionResult> ConditionsField;
        
        private int EachPersonCanExchangeTheNumberOfAllField;
        
        private int EachPersonCanExchangeTheNumberOfDaysField;
        
        private int EachPersonCanExchangeTheNumberOfTimesField;
        
        private int EachPersonCanExchangeTheTimesOfAllField;
        
        private int EachPersonCanExchangeTheTimesOfDaysField;
        
        private System.DateTime EndTimeField;
        
        private int ExchangeIdField;
        
        private string NameField;
        
        private int PlacesField;
        
        private System.Collections.Generic.List<IWorld.Client.ActivityService.PrizesResult> PrizesField;
        
        private double UnitPriceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BeginTime {
            get {
                return this.BeginTimeField;
            }
            set {
                if ((this.BeginTimeField.Equals(value) != true)) {
                    this.BeginTimeField = value;
                    this.RaisePropertyChanged("BeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Client.ActivityService.ConditionResult> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfAll {
            get {
                return this.EachPersonCanExchangeTheNumberOfAllField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfAllField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfAllField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfDays {
            get {
                return this.EachPersonCanExchangeTheNumberOfDaysField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfDaysField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfDaysField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheNumberOfTimes {
            get {
                return this.EachPersonCanExchangeTheNumberOfTimesField;
            }
            set {
                if ((this.EachPersonCanExchangeTheNumberOfTimesField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheNumberOfTimesField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheNumberOfTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheTimesOfAll {
            get {
                return this.EachPersonCanExchangeTheTimesOfAllField;
            }
            set {
                if ((this.EachPersonCanExchangeTheTimesOfAllField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheTimesOfAllField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheTimesOfAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EachPersonCanExchangeTheTimesOfDays {
            get {
                return this.EachPersonCanExchangeTheTimesOfDaysField;
            }
            set {
                if ((this.EachPersonCanExchangeTheTimesOfDaysField.Equals(value) != true)) {
                    this.EachPersonCanExchangeTheTimesOfDaysField = value;
                    this.RaisePropertyChanged("EachPersonCanExchangeTheTimesOfDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExchangeId {
            get {
                return this.ExchangeIdField;
            }
            set {
                if ((this.ExchangeIdField.Equals(value) != true)) {
                    this.ExchangeIdField = value;
                    this.RaisePropertyChanged("ExchangeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Places {
            get {
                return this.PlacesField;
            }
            set {
                if ((this.PlacesField.Equals(value) != true)) {
                    this.PlacesField = value;
                    this.RaisePropertyChanged("Places");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Client.ActivityService.PrizesResult> Prizes {
            get {
                return this.PrizesField;
            }
            set {
                if ((object.ReferenceEquals(this.PrizesField, value) != true)) {
                    this.PrizesField = value;
                    this.RaisePropertyChanged("Prizes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConditionResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    public partial class ConditionResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double LimitField;
        
        private IWorld.Client.ActivityService.ConditionType TypeField;
        
        private double UpperField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Client.ActivityService.ConditionType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Upper {
            get {
                return this.UpperField;
            }
            set {
                if ((this.UpperField.Equals(value) != true)) {
                    this.UpperField = value;
                    this.RaisePropertyChanged("Upper");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrizesResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    public partial class PrizesResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string NameField;
        
        private double PriceField;
        
        private string RemarkField;
        
        private int SumField;
        
        private IWorld.Client.ActivityService.PrizeType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Client.ActivityService.PrizeType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConditionType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum ConditionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        用户组等级 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        消费量 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        注册时间 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        资金余额 = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrizeType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum PrizeType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        人民币 = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        实物 = 201,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        积分 = 301,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityRewardType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum ActivityRewardType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        积分 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        人民币 = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum ActivityType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        注册返点 = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        充值返点 = 201,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级用户充值返点 = 202,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下下级用户充值返点 = 203,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        消费返点 = 301,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级用户消费返点 = 302,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下下级用户消费返点 = 303,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        亏损返点 = 401,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级用户亏损返点 = 402,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下下级用户亏损返点 = 403,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        当日累计消费奖励_非周末 = 501,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        当日累计消费奖励_周末 = 502,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级用户当日累计消费奖励 = 503,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下下级用户当日累计消费奖励 = 504,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        当日累计充值奖励 = 601,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级用户当日累计充值奖励 = 602,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下下级用户当日累计充值奖励 = 603,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        当日累计亏损补贴 = 701,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级用户当日累计亏损补贴 = 702,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下下级用户当日累计亏损补贴 = 703,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ActivityService.IActivityService")]
    public interface IActivityService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/GetNormalActivities", ReplyAction="http://tempuri.org/IActivityService/GetNormalActivitiesResponse")]
        System.IAsyncResult BeginGetNormalActivities(int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Client.ActivityService.PaginationListOfNormalActivitiesResultL_PYu6_SAe EndGetNormalActivities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/GetExchangeActivities", ReplyAction="http://tempuri.org/IActivityService/GetExchangeActivitiesResponse")]
        System.IAsyncResult BeginGetExchangeActivities(int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Client.ActivityService.PaginationListOfExchangeActivitiesResultL_PYu6_SAe EndGetExchangeActivities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/Exchange", ReplyAction="http://tempuri.org/IActivityService/ExchangeResponse")]
        System.IAsyncResult BeginExchange(int exchangeId, int sum, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Client.ActivityService.OperateResult EndExchange(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IActivityServiceChannel : IWorld.Client.ActivityService.IActivityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNormalActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNormalActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Client.ActivityService.PaginationListOfNormalActivitiesResultL_PYu6_SAe Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Client.ActivityService.PaginationListOfNormalActivitiesResultL_PYu6_SAe)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExchangeActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetExchangeActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Client.ActivityService.PaginationListOfExchangeActivitiesResultL_PYu6_SAe Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Client.ActivityService.PaginationListOfExchangeActivitiesResultL_PYu6_SAe)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExchangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExchangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Client.ActivityService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Client.ActivityService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActivityServiceClient : System.ServiceModel.ClientBase<IWorld.Client.ActivityService.IActivityService>, IWorld.Client.ActivityService.IActivityService {
        
        private BeginOperationDelegate onBeginGetNormalActivitiesDelegate;
        
        private EndOperationDelegate onEndGetNormalActivitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetNormalActivitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExchangeActivitiesDelegate;
        
        private EndOperationDelegate onEndGetExchangeActivitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetExchangeActivitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginExchangeDelegate;
        
        private EndOperationDelegate onEndExchangeDelegate;
        
        private System.Threading.SendOrPostCallback onExchangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ActivityServiceClient() {
        }
        
        public ActivityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ActivityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActivityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActivityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetNormalActivitiesCompletedEventArgs> GetNormalActivitiesCompleted;
        
        public event System.EventHandler<GetExchangeActivitiesCompletedEventArgs> GetExchangeActivitiesCompleted;
        
        public event System.EventHandler<ExchangeCompletedEventArgs> ExchangeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Client.ActivityService.IActivityService.BeginGetNormalActivities(int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNormalActivities(page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Client.ActivityService.PaginationListOfNormalActivitiesResultL_PYu6_SAe IWorld.Client.ActivityService.IActivityService.EndGetNormalActivities(System.IAsyncResult result) {
            return base.Channel.EndGetNormalActivities(result);
        }
        
        private System.IAsyncResult OnBeginGetNormalActivities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int page = ((int)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Client.ActivityService.IActivityService)(this)).BeginGetNormalActivities(page, token, callback, asyncState);
        }
        
        private object[] OnEndGetNormalActivities(System.IAsyncResult result) {
            IWorld.Client.ActivityService.PaginationListOfNormalActivitiesResultL_PYu6_SAe retVal = ((IWorld.Client.ActivityService.IActivityService)(this)).EndGetNormalActivities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNormalActivitiesCompleted(object state) {
            if ((this.GetNormalActivitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNormalActivitiesCompleted(this, new GetNormalActivitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNormalActivitiesAsync(int page, string token) {
            this.GetNormalActivitiesAsync(page, token, null);
        }
        
        public void GetNormalActivitiesAsync(int page, string token, object userState) {
            if ((this.onBeginGetNormalActivitiesDelegate == null)) {
                this.onBeginGetNormalActivitiesDelegate = new BeginOperationDelegate(this.OnBeginGetNormalActivities);
            }
            if ((this.onEndGetNormalActivitiesDelegate == null)) {
                this.onEndGetNormalActivitiesDelegate = new EndOperationDelegate(this.OnEndGetNormalActivities);
            }
            if ((this.onGetNormalActivitiesCompletedDelegate == null)) {
                this.onGetNormalActivitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNormalActivitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetNormalActivitiesDelegate, new object[] {
                        page,
                        token}, this.onEndGetNormalActivitiesDelegate, this.onGetNormalActivitiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Client.ActivityService.IActivityService.BeginGetExchangeActivities(int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetExchangeActivities(page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Client.ActivityService.PaginationListOfExchangeActivitiesResultL_PYu6_SAe IWorld.Client.ActivityService.IActivityService.EndGetExchangeActivities(System.IAsyncResult result) {
            return base.Channel.EndGetExchangeActivities(result);
        }
        
        private System.IAsyncResult OnBeginGetExchangeActivities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int page = ((int)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Client.ActivityService.IActivityService)(this)).BeginGetExchangeActivities(page, token, callback, asyncState);
        }
        
        private object[] OnEndGetExchangeActivities(System.IAsyncResult result) {
            IWorld.Client.ActivityService.PaginationListOfExchangeActivitiesResultL_PYu6_SAe retVal = ((IWorld.Client.ActivityService.IActivityService)(this)).EndGetExchangeActivities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExchangeActivitiesCompleted(object state) {
            if ((this.GetExchangeActivitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExchangeActivitiesCompleted(this, new GetExchangeActivitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExchangeActivitiesAsync(int page, string token) {
            this.GetExchangeActivitiesAsync(page, token, null);
        }
        
        public void GetExchangeActivitiesAsync(int page, string token, object userState) {
            if ((this.onBeginGetExchangeActivitiesDelegate == null)) {
                this.onBeginGetExchangeActivitiesDelegate = new BeginOperationDelegate(this.OnBeginGetExchangeActivities);
            }
            if ((this.onEndGetExchangeActivitiesDelegate == null)) {
                this.onEndGetExchangeActivitiesDelegate = new EndOperationDelegate(this.OnEndGetExchangeActivities);
            }
            if ((this.onGetExchangeActivitiesCompletedDelegate == null)) {
                this.onGetExchangeActivitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExchangeActivitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetExchangeActivitiesDelegate, new object[] {
                        page,
                        token}, this.onEndGetExchangeActivitiesDelegate, this.onGetExchangeActivitiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Client.ActivityService.IActivityService.BeginExchange(int exchangeId, int sum, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExchange(exchangeId, sum, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Client.ActivityService.OperateResult IWorld.Client.ActivityService.IActivityService.EndExchange(System.IAsyncResult result) {
            return base.Channel.EndExchange(result);
        }
        
        private System.IAsyncResult OnBeginExchange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int exchangeId = ((int)(inValues[0]));
            int sum = ((int)(inValues[1]));
            string token = ((string)(inValues[2]));
            return ((IWorld.Client.ActivityService.IActivityService)(this)).BeginExchange(exchangeId, sum, token, callback, asyncState);
        }
        
        private object[] OnEndExchange(System.IAsyncResult result) {
            IWorld.Client.ActivityService.OperateResult retVal = ((IWorld.Client.ActivityService.IActivityService)(this)).EndExchange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExchangeCompleted(object state) {
            if ((this.ExchangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExchangeCompleted(this, new ExchangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExchangeAsync(int exchangeId, int sum, string token) {
            this.ExchangeAsync(exchangeId, sum, token, null);
        }
        
        public void ExchangeAsync(int exchangeId, int sum, string token, object userState) {
            if ((this.onBeginExchangeDelegate == null)) {
                this.onBeginExchangeDelegate = new BeginOperationDelegate(this.OnBeginExchange);
            }
            if ((this.onEndExchangeDelegate == null)) {
                this.onEndExchangeDelegate = new EndOperationDelegate(this.OnEndExchange);
            }
            if ((this.onExchangeCompletedDelegate == null)) {
                this.onExchangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExchangeCompleted);
            }
            base.InvokeAsync(this.onBeginExchangeDelegate, new object[] {
                        exchangeId,
                        sum,
                        token}, this.onEndExchangeDelegate, this.onExchangeCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IWorld.Client.ActivityService.IActivityService CreateChannel() {
            return new ActivityServiceClientChannel(this);
        }
        
        private class ActivityServiceClientChannel : ChannelBase<IWorld.Client.ActivityService.IActivityService>, IWorld.Client.ActivityService.IActivityService {
            
            public ActivityServiceClientChannel(System.ServiceModel.ClientBase<IWorld.Client.ActivityService.IActivityService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetNormalActivities(int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = page;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetNormalActivities", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Client.ActivityService.PaginationListOfNormalActivitiesResultL_PYu6_SAe EndGetNormalActivities(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Client.ActivityService.PaginationListOfNormalActivitiesResultL_PYu6_SAe _result = ((IWorld.Client.ActivityService.PaginationListOfNormalActivitiesResultL_PYu6_SAe)(base.EndInvoke("GetNormalActivities", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetExchangeActivities(int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = page;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetExchangeActivities", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Client.ActivityService.PaginationListOfExchangeActivitiesResultL_PYu6_SAe EndGetExchangeActivities(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Client.ActivityService.PaginationListOfExchangeActivitiesResultL_PYu6_SAe _result = ((IWorld.Client.ActivityService.PaginationListOfExchangeActivitiesResultL_PYu6_SAe)(base.EndInvoke("GetExchangeActivities", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExchange(int exchangeId, int sum, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = exchangeId;
                _args[1] = sum;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("Exchange", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Client.ActivityService.OperateResult EndExchange(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Client.ActivityService.OperateResult _result = ((IWorld.Client.ActivityService.OperateResult)(base.EndInvoke("Exchange", _args, result)));
                return _result;
            }
        }
    }
}
