//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace IWorld.Shark.Control.JawService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperateResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Shark.Control.JawService.MainOfJawResult))]
    public partial class OperateResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorField;
        
        private bool SuccessField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MainOfJawResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    public partial class MainOfJawResult : IWorld.Shark.Control.JawService.OperateResult {
        
        private bool HadLotteryField;
        
        private int LoteryValueField;
        
        private System.DateTime NextLotteryTimeField;
        
        private string NextPhasesField;
        
        private string PhasesField;
        
        private double ProfitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HadLottery {
            get {
                return this.HadLotteryField;
            }
            set {
                if ((this.HadLotteryField.Equals(value) != true)) {
                    this.HadLotteryField = value;
                    this.RaisePropertyChanged("HadLottery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoteryValue {
            get {
                return this.LoteryValueField;
            }
            set {
                if ((this.LoteryValueField.Equals(value) != true)) {
                    this.LoteryValueField = value;
                    this.RaisePropertyChanged("LoteryValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime NextLotteryTime {
            get {
                return this.NextLotteryTimeField;
            }
            set {
                if ((this.NextLotteryTimeField.Equals(value) != true)) {
                    this.NextLotteryTimeField = value;
                    this.RaisePropertyChanged("NextLotteryTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NextPhases {
            get {
                return this.NextPhasesField;
            }
            set {
                if ((object.ReferenceEquals(this.NextPhasesField, value) != true)) {
                    this.NextPhasesField = value;
                    this.RaisePropertyChanged("NextPhases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phases {
            get {
                return this.PhasesField;
            }
            set {
                if ((object.ReferenceEquals(this.PhasesField, value) != true)) {
                    this.PhasesField = value;
                    this.RaisePropertyChanged("Phases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Profit {
            get {
                return this.ProfitField;
            }
            set {
                if ((this.ProfitField.Equals(value) != true)) {
                    this.ProfitField = value;
                    this.RaisePropertyChanged("Profit");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LotteryOfJawResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    public partial class LotteryOfJawResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private IWorld.Shark.Control.JawService.IconOfJaw IconField;
        
        private string IssueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Shark.Control.JawService.IconOfJaw Icon {
            get {
                return this.IconField;
            }
            set {
                if ((this.IconField.Equals(value) != true)) {
                    this.IconField = value;
                    this.RaisePropertyChanged("Icon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Issue {
            get {
                return this.IssueField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueField, value) != true)) {
                    this.IssueField = value;
                    this.RaisePropertyChanged("Issue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IconOfJaw", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum IconOfJaw : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        金色鲨鱼 = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        蓝色鲨鱼 = 102,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        燕子 = 201,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        鸽子 = 202,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        孔雀 = 203,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        老鹰 = 204,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        狮子 = 301,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        熊猫 = 302,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        猴子 = 303,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        兔子 = 304,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        通杀 = 401,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        通赔 = 402,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        飞禽 = 501,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        走兽 = 502,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BettingOfJawImport", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    public partial class BettingOfJawImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<IWorld.Shark.Control.JawService.BettingDetailOfJawImport> DetailsField;
        
        private string IssueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Shark.Control.JawService.BettingDetailOfJawImport> Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Issue {
            get {
                return this.IssueField;
            }
            set {
                if ((object.ReferenceEquals(this.IssueField, value) != true)) {
                    this.IssueField = value;
                    this.RaisePropertyChanged("Issue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BettingDetailOfJawImport", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Client")]
    public partial class BettingDetailOfJawImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private IWorld.Shark.Control.JawService.IconOfJaw IconField;
        
        private double SumField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Shark.Control.JawService.IconOfJaw Icon {
            get {
                return this.IconField;
            }
            set {
                if ((this.IconField.Equals(value) != true)) {
                    this.IconField = value;
                    this.RaisePropertyChanged("Icon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JawService.IJawService")]
    public interface IJawService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IJawService/GetMainOfJaw", ReplyAction="http://tempuri.org/IJawService/GetMainOfJawResponse")]
        System.IAsyncResult BeginGetMainOfJaw(string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Shark.Control.JawService.MainOfJawResult EndGetMainOfJaw(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IJawService/GetLotterys", ReplyAction="http://tempuri.org/IJawService/GetLotterysResponse")]
        System.IAsyncResult BeginGetLotterys(string token, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<IWorld.Shark.Control.JawService.LotteryOfJawResult> EndGetLotterys(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IJawService/Bet", ReplyAction="http://tempuri.org/IJawService/BetResponse")]
        System.IAsyncResult BeginBet(IWorld.Shark.Control.JawService.BettingOfJawImport import, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Shark.Control.JawService.OperateResult EndBet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IJawService/Revocation", ReplyAction="http://tempuri.org/IJawService/RevocationResponse")]
        System.IAsyncResult BeginRevocation(string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Shark.Control.JawService.OperateResult EndRevocation(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJawServiceChannel : IWorld.Shark.Control.JawService.IJawService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMainOfJawCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMainOfJawCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Shark.Control.JawService.MainOfJawResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Shark.Control.JawService.MainOfJawResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLotterysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLotterysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<IWorld.Shark.Control.JawService.LotteryOfJawResult> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<IWorld.Shark.Control.JawService.LotteryOfJawResult>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Shark.Control.JawService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Shark.Control.JawService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Shark.Control.JawService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Shark.Control.JawService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JawServiceClient : System.ServiceModel.ClientBase<IWorld.Shark.Control.JawService.IJawService>, IWorld.Shark.Control.JawService.IJawService {
        
        private BeginOperationDelegate onBeginGetMainOfJawDelegate;
        
        private EndOperationDelegate onEndGetMainOfJawDelegate;
        
        private System.Threading.SendOrPostCallback onGetMainOfJawCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLotterysDelegate;
        
        private EndOperationDelegate onEndGetLotterysDelegate;
        
        private System.Threading.SendOrPostCallback onGetLotterysCompletedDelegate;
        
        private BeginOperationDelegate onBeginBetDelegate;
        
        private EndOperationDelegate onEndBetDelegate;
        
        private System.Threading.SendOrPostCallback onBetCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevocationDelegate;
        
        private EndOperationDelegate onEndRevocationDelegate;
        
        private System.Threading.SendOrPostCallback onRevocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public JawServiceClient() {
        }
        
        public JawServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JawServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JawServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JawServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetMainOfJawCompletedEventArgs> GetMainOfJawCompleted;
        
        public event System.EventHandler<GetLotterysCompletedEventArgs> GetLotterysCompleted;
        
        public event System.EventHandler<BetCompletedEventArgs> BetCompleted;
        
        public event System.EventHandler<RevocationCompletedEventArgs> RevocationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Shark.Control.JawService.IJawService.BeginGetMainOfJaw(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMainOfJaw(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Shark.Control.JawService.MainOfJawResult IWorld.Shark.Control.JawService.IJawService.EndGetMainOfJaw(System.IAsyncResult result) {
            return base.Channel.EndGetMainOfJaw(result);
        }
        
        private System.IAsyncResult OnBeginGetMainOfJaw(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return ((IWorld.Shark.Control.JawService.IJawService)(this)).BeginGetMainOfJaw(token, callback, asyncState);
        }
        
        private object[] OnEndGetMainOfJaw(System.IAsyncResult result) {
            IWorld.Shark.Control.JawService.MainOfJawResult retVal = ((IWorld.Shark.Control.JawService.IJawService)(this)).EndGetMainOfJaw(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMainOfJawCompleted(object state) {
            if ((this.GetMainOfJawCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMainOfJawCompleted(this, new GetMainOfJawCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMainOfJawAsync(string token) {
            this.GetMainOfJawAsync(token, null);
        }
        
        public void GetMainOfJawAsync(string token, object userState) {
            if ((this.onBeginGetMainOfJawDelegate == null)) {
                this.onBeginGetMainOfJawDelegate = new BeginOperationDelegate(this.OnBeginGetMainOfJaw);
            }
            if ((this.onEndGetMainOfJawDelegate == null)) {
                this.onEndGetMainOfJawDelegate = new EndOperationDelegate(this.OnEndGetMainOfJaw);
            }
            if ((this.onGetMainOfJawCompletedDelegate == null)) {
                this.onGetMainOfJawCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMainOfJawCompleted);
            }
            base.InvokeAsync(this.onBeginGetMainOfJawDelegate, new object[] {
                        token}, this.onEndGetMainOfJawDelegate, this.onGetMainOfJawCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Shark.Control.JawService.IJawService.BeginGetLotterys(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLotterys(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<IWorld.Shark.Control.JawService.LotteryOfJawResult> IWorld.Shark.Control.JawService.IJawService.EndGetLotterys(System.IAsyncResult result) {
            return base.Channel.EndGetLotterys(result);
        }
        
        private System.IAsyncResult OnBeginGetLotterys(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return ((IWorld.Shark.Control.JawService.IJawService)(this)).BeginGetLotterys(token, callback, asyncState);
        }
        
        private object[] OnEndGetLotterys(System.IAsyncResult result) {
            System.Collections.Generic.List<IWorld.Shark.Control.JawService.LotteryOfJawResult> retVal = ((IWorld.Shark.Control.JawService.IJawService)(this)).EndGetLotterys(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLotterysCompleted(object state) {
            if ((this.GetLotterysCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLotterysCompleted(this, new GetLotterysCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLotterysAsync(string token) {
            this.GetLotterysAsync(token, null);
        }
        
        public void GetLotterysAsync(string token, object userState) {
            if ((this.onBeginGetLotterysDelegate == null)) {
                this.onBeginGetLotterysDelegate = new BeginOperationDelegate(this.OnBeginGetLotterys);
            }
            if ((this.onEndGetLotterysDelegate == null)) {
                this.onEndGetLotterysDelegate = new EndOperationDelegate(this.OnEndGetLotterys);
            }
            if ((this.onGetLotterysCompletedDelegate == null)) {
                this.onGetLotterysCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLotterysCompleted);
            }
            base.InvokeAsync(this.onBeginGetLotterysDelegate, new object[] {
                        token}, this.onEndGetLotterysDelegate, this.onGetLotterysCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Shark.Control.JawService.IJawService.BeginBet(IWorld.Shark.Control.JawService.BettingOfJawImport import, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBet(import, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Shark.Control.JawService.OperateResult IWorld.Shark.Control.JawService.IJawService.EndBet(System.IAsyncResult result) {
            return base.Channel.EndBet(result);
        }
        
        private System.IAsyncResult OnBeginBet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IWorld.Shark.Control.JawService.BettingOfJawImport import = ((IWorld.Shark.Control.JawService.BettingOfJawImport)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Shark.Control.JawService.IJawService)(this)).BeginBet(import, token, callback, asyncState);
        }
        
        private object[] OnEndBet(System.IAsyncResult result) {
            IWorld.Shark.Control.JawService.OperateResult retVal = ((IWorld.Shark.Control.JawService.IJawService)(this)).EndBet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBetCompleted(object state) {
            if ((this.BetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BetCompleted(this, new BetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BetAsync(IWorld.Shark.Control.JawService.BettingOfJawImport import, string token) {
            this.BetAsync(import, token, null);
        }
        
        public void BetAsync(IWorld.Shark.Control.JawService.BettingOfJawImport import, string token, object userState) {
            if ((this.onBeginBetDelegate == null)) {
                this.onBeginBetDelegate = new BeginOperationDelegate(this.OnBeginBet);
            }
            if ((this.onEndBetDelegate == null)) {
                this.onEndBetDelegate = new EndOperationDelegate(this.OnEndBet);
            }
            if ((this.onBetCompletedDelegate == null)) {
                this.onBetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBetCompleted);
            }
            base.InvokeAsync(this.onBeginBetDelegate, new object[] {
                        import,
                        token}, this.onEndBetDelegate, this.onBetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Shark.Control.JawService.IJawService.BeginRevocation(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevocation(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Shark.Control.JawService.OperateResult IWorld.Shark.Control.JawService.IJawService.EndRevocation(System.IAsyncResult result) {
            return base.Channel.EndRevocation(result);
        }
        
        private System.IAsyncResult OnBeginRevocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return ((IWorld.Shark.Control.JawService.IJawService)(this)).BeginRevocation(token, callback, asyncState);
        }
        
        private object[] OnEndRevocation(System.IAsyncResult result) {
            IWorld.Shark.Control.JawService.OperateResult retVal = ((IWorld.Shark.Control.JawService.IJawService)(this)).EndRevocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevocationCompleted(object state) {
            if ((this.RevocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevocationCompleted(this, new RevocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevocationAsync(string token) {
            this.RevocationAsync(token, null);
        }
        
        public void RevocationAsync(string token, object userState) {
            if ((this.onBeginRevocationDelegate == null)) {
                this.onBeginRevocationDelegate = new BeginOperationDelegate(this.OnBeginRevocation);
            }
            if ((this.onEndRevocationDelegate == null)) {
                this.onEndRevocationDelegate = new EndOperationDelegate(this.OnEndRevocation);
            }
            if ((this.onRevocationCompletedDelegate == null)) {
                this.onRevocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevocationCompleted);
            }
            base.InvokeAsync(this.onBeginRevocationDelegate, new object[] {
                        token}, this.onEndRevocationDelegate, this.onRevocationCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IWorld.Shark.Control.JawService.IJawService CreateChannel() {
            return new JawServiceClientChannel(this);
        }
        
        private class JawServiceClientChannel : ChannelBase<IWorld.Shark.Control.JawService.IJawService>, IWorld.Shark.Control.JawService.IJawService {
            
            public JawServiceClientChannel(System.ServiceModel.ClientBase<IWorld.Shark.Control.JawService.IJawService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetMainOfJaw(string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetMainOfJaw", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Shark.Control.JawService.MainOfJawResult EndGetMainOfJaw(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Shark.Control.JawService.MainOfJawResult _result = ((IWorld.Shark.Control.JawService.MainOfJawResult)(base.EndInvoke("GetMainOfJaw", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLotterys(string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetLotterys", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<IWorld.Shark.Control.JawService.LotteryOfJawResult> EndGetLotterys(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<IWorld.Shark.Control.JawService.LotteryOfJawResult> _result = ((System.Collections.Generic.List<IWorld.Shark.Control.JawService.LotteryOfJawResult>)(base.EndInvoke("GetLotterys", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBet(IWorld.Shark.Control.JawService.BettingOfJawImport import, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = import;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("Bet", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Shark.Control.JawService.OperateResult EndBet(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Shark.Control.JawService.OperateResult _result = ((IWorld.Shark.Control.JawService.OperateResult)(base.EndInvoke("Bet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRevocation(string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = token;
                System.IAsyncResult _result = base.BeginInvoke("Revocation", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Shark.Control.JawService.OperateResult EndRevocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Shark.Control.JawService.OperateResult _result = ((IWorld.Shark.Control.JawService.OperateResult)(base.EndInvoke("Revocation", _args, result)));
                return _result;
            }
        }
    }
}
