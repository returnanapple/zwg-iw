//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace IWorld.Admin.Framework.ActivityService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityTypeSelectType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public enum ActivityTypeSelectType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        全部 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        注册返点 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        充值返点 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级用户充值返点 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        消费返点 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级用户消费返点 = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegularlyStatusSelectType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public enum RegularlyStatusSelectType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        全部 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        未过期 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        正常 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        暂停 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        已过期 = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperateResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.ActivityService.PaginationListOfActivityParticipateRecordResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.ActivityService.PaginationListOfActivityResultp9CVq9mK))]
    public partial class OperateResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorField;
        
        private bool SuccessField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfActivityParticipateRecordResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfActivityParticipateRecordResultp9CVq9mK : IWorld.Admin.Framework.ActivityService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.ActivityService.ActivityParticipateRecordResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.ActivityService.ActivityParticipateRecordResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfActivityResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfActivityResultp9CVq9mK : IWorld.Admin.Framework.ActivityService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.ActivityService.ActivityResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.ActivityService.ActivityResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class ActivityResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ActivityIdField;
        
        private bool AutoDeleteField;
        
        private System.DateTime BeginTimeField;
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.ActivityService.ConditionResult> ConditionsField;
        
        private int DaysField;
        
        private System.DateTime EndTimeField;
        
        private bool HideField;
        
        private double MaxRestrictionValuesField;
        
        private double MinRestrictionValueField;
        
        private double RewardField;
        
        private IWorld.Admin.Framework.ActivityService.ActivityRewardType RewardTypeField;
        
        private bool RewardValueIsAbsoluteField;
        
        private string TitleField;
        
        private IWorld.Admin.Framework.ActivityService.ActivityType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityId {
            get {
                return this.ActivityIdField;
            }
            set {
                if ((this.ActivityIdField.Equals(value) != true)) {
                    this.ActivityIdField = value;
                    this.RaisePropertyChanged("ActivityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoDelete {
            get {
                return this.AutoDeleteField;
            }
            set {
                if ((this.AutoDeleteField.Equals(value) != true)) {
                    this.AutoDeleteField = value;
                    this.RaisePropertyChanged("AutoDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BeginTime {
            get {
                return this.BeginTimeField;
            }
            set {
                if ((this.BeginTimeField.Equals(value) != true)) {
                    this.BeginTimeField = value;
                    this.RaisePropertyChanged("BeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.ActivityService.ConditionResult> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Days {
            get {
                return this.DaysField;
            }
            set {
                if ((this.DaysField.Equals(value) != true)) {
                    this.DaysField = value;
                    this.RaisePropertyChanged("Days");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Hide {
            get {
                return this.HideField;
            }
            set {
                if ((this.HideField.Equals(value) != true)) {
                    this.HideField = value;
                    this.RaisePropertyChanged("Hide");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxRestrictionValues {
            get {
                return this.MaxRestrictionValuesField;
            }
            set {
                if ((this.MaxRestrictionValuesField.Equals(value) != true)) {
                    this.MaxRestrictionValuesField = value;
                    this.RaisePropertyChanged("MaxRestrictionValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinRestrictionValue {
            get {
                return this.MinRestrictionValueField;
            }
            set {
                if ((this.MinRestrictionValueField.Equals(value) != true)) {
                    this.MinRestrictionValueField = value;
                    this.RaisePropertyChanged("MinRestrictionValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Reward {
            get {
                return this.RewardField;
            }
            set {
                if ((this.RewardField.Equals(value) != true)) {
                    this.RewardField = value;
                    this.RaisePropertyChanged("Reward");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.ActivityService.ActivityRewardType RewardType {
            get {
                return this.RewardTypeField;
            }
            set {
                if ((this.RewardTypeField.Equals(value) != true)) {
                    this.RewardTypeField = value;
                    this.RaisePropertyChanged("RewardType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RewardValueIsAbsolute {
            get {
                return this.RewardValueIsAbsoluteField;
            }
            set {
                if ((this.RewardValueIsAbsoluteField.Equals(value) != true)) {
                    this.RewardValueIsAbsoluteField = value;
                    this.RaisePropertyChanged("RewardValueIsAbsolute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.ActivityService.ActivityType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityParticipateRecordResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class ActivityParticipateRecordResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ActivityIdField;
        
        private string ActivityNameField;
        
        private int ActivityParticipateRecordIdField;
        
        private int OwnerIdField;
        
        private string OwnerNameField;
        
        private System.DateTime ParticipatedTimeField;
        
        private double RewardField;
        
        private IWorld.Admin.Framework.ActivityService.ActivityRewardType RewardTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityId {
            get {
                return this.ActivityIdField;
            }
            set {
                if ((this.ActivityIdField.Equals(value) != true)) {
                    this.ActivityIdField = value;
                    this.RaisePropertyChanged("ActivityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName {
            get {
                return this.ActivityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityNameField, value) != true)) {
                    this.ActivityNameField = value;
                    this.RaisePropertyChanged("ActivityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityParticipateRecordId {
            get {
                return this.ActivityParticipateRecordIdField;
            }
            set {
                if ((this.ActivityParticipateRecordIdField.Equals(value) != true)) {
                    this.ActivityParticipateRecordIdField = value;
                    this.RaisePropertyChanged("ActivityParticipateRecordId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ParticipatedTime {
            get {
                return this.ParticipatedTimeField;
            }
            set {
                if ((this.ParticipatedTimeField.Equals(value) != true)) {
                    this.ParticipatedTimeField = value;
                    this.RaisePropertyChanged("ParticipatedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Reward {
            get {
                return this.RewardField;
            }
            set {
                if ((this.RewardField.Equals(value) != true)) {
                    this.RewardField = value;
                    this.RaisePropertyChanged("Reward");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.ActivityService.ActivityRewardType RewardType {
            get {
                return this.RewardTypeField;
            }
            set {
                if ((this.RewardTypeField.Equals(value) != true)) {
                    this.RewardTypeField = value;
                    this.RaisePropertyChanged("RewardType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityRewardType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum ActivityRewardType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        积分 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        人民币 = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConditionResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class ConditionResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ConditionIdField;
        
        private double LimitField;
        
        private IWorld.Admin.Framework.ActivityService.ConditionType TypeField;
        
        private double UpperField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConditionId {
            get {
                return this.ConditionIdField;
            }
            set {
                if ((this.ConditionIdField.Equals(value) != true)) {
                    this.ConditionIdField = value;
                    this.RaisePropertyChanged("ConditionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.ActivityService.ConditionType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Upper {
            get {
                return this.UpperField;
            }
            set {
                if ((this.UpperField.Equals(value) != true)) {
                    this.UpperField = value;
                    this.RaisePropertyChanged("Upper");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum ActivityType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        注册返点 = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        充值返点 = 201,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级用户充值返点 = 202,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        消费返点 = 301,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        下级用户消费返点 = 302,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConditionType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum ConditionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        用户组等级 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        消费量 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        注册时间 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        资金余额 = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddActivityImport", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class AddActivityImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AutoDeleteField;
        
        private string BeginTimeField;
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.ActivityService.EditConditionImport> ConditionsField;
        
        private int DaysField;
        
        private double MaxRestrictionValuesField;
        
        private double MinRestrictionValueField;
        
        private double RewardField;
        
        private IWorld.Admin.Framework.ActivityService.ActivityRewardType RewardTypeField;
        
        private bool RewardValueIsAbsoluteField;
        
        private string TitleField;
        
        private IWorld.Admin.Framework.ActivityService.ActivityType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoDelete {
            get {
                return this.AutoDeleteField;
            }
            set {
                if ((this.AutoDeleteField.Equals(value) != true)) {
                    this.AutoDeleteField = value;
                    this.RaisePropertyChanged("AutoDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BeginTime {
            get {
                return this.BeginTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.BeginTimeField, value) != true)) {
                    this.BeginTimeField = value;
                    this.RaisePropertyChanged("BeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.ActivityService.EditConditionImport> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Days {
            get {
                return this.DaysField;
            }
            set {
                if ((this.DaysField.Equals(value) != true)) {
                    this.DaysField = value;
                    this.RaisePropertyChanged("Days");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxRestrictionValues {
            get {
                return this.MaxRestrictionValuesField;
            }
            set {
                if ((this.MaxRestrictionValuesField.Equals(value) != true)) {
                    this.MaxRestrictionValuesField = value;
                    this.RaisePropertyChanged("MaxRestrictionValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinRestrictionValue {
            get {
                return this.MinRestrictionValueField;
            }
            set {
                if ((this.MinRestrictionValueField.Equals(value) != true)) {
                    this.MinRestrictionValueField = value;
                    this.RaisePropertyChanged("MinRestrictionValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Reward {
            get {
                return this.RewardField;
            }
            set {
                if ((this.RewardField.Equals(value) != true)) {
                    this.RewardField = value;
                    this.RaisePropertyChanged("Reward");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.ActivityService.ActivityRewardType RewardType {
            get {
                return this.RewardTypeField;
            }
            set {
                if ((this.RewardTypeField.Equals(value) != true)) {
                    this.RewardTypeField = value;
                    this.RaisePropertyChanged("RewardType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RewardValueIsAbsolute {
            get {
                return this.RewardValueIsAbsoluteField;
            }
            set {
                if ((this.RewardValueIsAbsoluteField.Equals(value) != true)) {
                    this.RewardValueIsAbsoluteField = value;
                    this.RaisePropertyChanged("RewardValueIsAbsolute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.ActivityService.ActivityType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditConditionImport", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class EditConditionImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double LimitField;
        
        private IWorld.Admin.Framework.ActivityService.ConditionType TypeField;
        
        private double UpperField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.ActivityService.ConditionType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Upper {
            get {
                return this.UpperField;
            }
            set {
                if ((this.UpperField.Equals(value) != true)) {
                    this.UpperField = value;
                    this.RaisePropertyChanged("Upper");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditActivityImport_Basic", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class EditActivityImport_Basic : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ActivityIdField;
        
        private bool AutoDeleteField;
        
        private int DaysField;
        
        private bool HideField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityId {
            get {
                return this.ActivityIdField;
            }
            set {
                if ((this.ActivityIdField.Equals(value) != true)) {
                    this.ActivityIdField = value;
                    this.RaisePropertyChanged("ActivityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoDelete {
            get {
                return this.AutoDeleteField;
            }
            set {
                if ((this.AutoDeleteField.Equals(value) != true)) {
                    this.AutoDeleteField = value;
                    this.RaisePropertyChanged("AutoDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Days {
            get {
                return this.DaysField;
            }
            set {
                if ((this.DaysField.Equals(value) != true)) {
                    this.DaysField = value;
                    this.RaisePropertyChanged("Days");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Hide {
            get {
                return this.HideField;
            }
            set {
                if ((this.HideField.Equals(value) != true)) {
                    this.HideField = value;
                    this.RaisePropertyChanged("Hide");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EditActivityImport", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class EditActivityImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ActivityIdField;
        
        private bool AutoDeleteField;
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.ActivityService.EditConditionImport> ConditionsField;
        
        private int DaysField;
        
        private bool HideField;
        
        private double MaxRestrictionValuesField;
        
        private double MinRestrictionValueField;
        
        private double RewardField;
        
        private IWorld.Admin.Framework.ActivityService.ActivityRewardType RewardTypeField;
        
        private bool RewardValueIsAbsoluteField;
        
        private string TitleField;
        
        private IWorld.Admin.Framework.ActivityService.ActivityType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityId {
            get {
                return this.ActivityIdField;
            }
            set {
                if ((this.ActivityIdField.Equals(value) != true)) {
                    this.ActivityIdField = value;
                    this.RaisePropertyChanged("ActivityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoDelete {
            get {
                return this.AutoDeleteField;
            }
            set {
                if ((this.AutoDeleteField.Equals(value) != true)) {
                    this.AutoDeleteField = value;
                    this.RaisePropertyChanged("AutoDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.ActivityService.EditConditionImport> Conditions {
            get {
                return this.ConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionsField, value) != true)) {
                    this.ConditionsField = value;
                    this.RaisePropertyChanged("Conditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Days {
            get {
                return this.DaysField;
            }
            set {
                if ((this.DaysField.Equals(value) != true)) {
                    this.DaysField = value;
                    this.RaisePropertyChanged("Days");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Hide {
            get {
                return this.HideField;
            }
            set {
                if ((this.HideField.Equals(value) != true)) {
                    this.HideField = value;
                    this.RaisePropertyChanged("Hide");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxRestrictionValues {
            get {
                return this.MaxRestrictionValuesField;
            }
            set {
                if ((this.MaxRestrictionValuesField.Equals(value) != true)) {
                    this.MaxRestrictionValuesField = value;
                    this.RaisePropertyChanged("MaxRestrictionValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinRestrictionValue {
            get {
                return this.MinRestrictionValueField;
            }
            set {
                if ((this.MinRestrictionValueField.Equals(value) != true)) {
                    this.MinRestrictionValueField = value;
                    this.RaisePropertyChanged("MinRestrictionValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Reward {
            get {
                return this.RewardField;
            }
            set {
                if ((this.RewardField.Equals(value) != true)) {
                    this.RewardField = value;
                    this.RaisePropertyChanged("Reward");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.ActivityService.ActivityRewardType RewardType {
            get {
                return this.RewardTypeField;
            }
            set {
                if ((this.RewardTypeField.Equals(value) != true)) {
                    this.RewardTypeField = value;
                    this.RaisePropertyChanged("RewardType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RewardValueIsAbsolute {
            get {
                return this.RewardValueIsAbsoluteField;
            }
            set {
                if ((this.RewardValueIsAbsoluteField.Equals(value) != true)) {
                    this.RewardValueIsAbsoluteField = value;
                    this.RaisePropertyChanged("RewardValueIsAbsolute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.ActivityService.ActivityType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ActivityService.IActivityService")]
    public interface IActivityService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/GetActivityList", ReplyAction="http://tempuri.org/IActivityService/GetActivityListResponse")]
        System.IAsyncResult BeginGetActivityList(string keyword, IWorld.Admin.Framework.ActivityService.ActivityTypeSelectType type, IWorld.Admin.Framework.ActivityService.RegularlyStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.ActivityService.PaginationListOfActivityResultp9CVq9mK EndGetActivityList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/GetParticipateRecordList", ReplyAction="http://tempuri.org/IActivityService/GetParticipateRecordListResponse")]
        System.IAsyncResult BeginGetParticipateRecordList(int activityId, int ownerId, string beginTime, string endTime, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.ActivityService.PaginationListOfActivityParticipateRecordResultp9CVq9mK EndGetParticipateRecordList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/AddActivity", ReplyAction="http://tempuri.org/IActivityService/AddActivityResponse")]
        System.IAsyncResult BeginAddActivity(IWorld.Admin.Framework.ActivityService.AddActivityImport import, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.ActivityService.OperateResult EndAddActivity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/EditActivity_Basic", ReplyAction="http://tempuri.org/IActivityService/EditActivity_BasicResponse")]
        System.IAsyncResult BeginEditActivity_Basic(IWorld.Admin.Framework.ActivityService.EditActivityImport_Basic import, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.ActivityService.OperateResult EndEditActivity_Basic(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/EditActivity", ReplyAction="http://tempuri.org/IActivityService/EditActivityResponse")]
        System.IAsyncResult BeginEditActivity(IWorld.Admin.Framework.ActivityService.EditActivityImport import, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.ActivityService.OperateResult EndEditActivity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/RemoveActivity", ReplyAction="http://tempuri.org/IActivityService/RemoveActivityResponse")]
        System.IAsyncResult BeginRemoveActivity(int activityId, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.ActivityService.OperateResult EndRemoveActivity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/HideActivity", ReplyAction="http://tempuri.org/IActivityService/HideActivityResponse")]
        System.IAsyncResult BeginHideActivity(int activityId, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.ActivityService.OperateResult EndHideActivity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IActivityService/ShowActivity", ReplyAction="http://tempuri.org/IActivityService/ShowActivityResponse")]
        System.IAsyncResult BeginShowActivity(int activityId, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.ActivityService.OperateResult EndShowActivity(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IActivityServiceChannel : IWorld.Admin.Framework.ActivityService.IActivityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActivityListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActivityListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.ActivityService.PaginationListOfActivityResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.ActivityService.PaginationListOfActivityResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetParticipateRecordListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetParticipateRecordListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.ActivityService.PaginationListOfActivityParticipateRecordResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.ActivityService.PaginationListOfActivityParticipateRecordResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.ActivityService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.ActivityService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditActivity_BasicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditActivity_BasicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.ActivityService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.ActivityService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.ActivityService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.ActivityService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.ActivityService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.ActivityService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HideActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public HideActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.ActivityService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.ActivityService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShowActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShowActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.ActivityService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.ActivityService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActivityServiceClient : System.ServiceModel.ClientBase<IWorld.Admin.Framework.ActivityService.IActivityService>, IWorld.Admin.Framework.ActivityService.IActivityService {
        
        private BeginOperationDelegate onBeginGetActivityListDelegate;
        
        private EndOperationDelegate onEndGetActivityListDelegate;
        
        private System.Threading.SendOrPostCallback onGetActivityListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetParticipateRecordListDelegate;
        
        private EndOperationDelegate onEndGetParticipateRecordListDelegate;
        
        private System.Threading.SendOrPostCallback onGetParticipateRecordListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddActivityDelegate;
        
        private EndOperationDelegate onEndAddActivityDelegate;
        
        private System.Threading.SendOrPostCallback onAddActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditActivity_BasicDelegate;
        
        private EndOperationDelegate onEndEditActivity_BasicDelegate;
        
        private System.Threading.SendOrPostCallback onEditActivity_BasicCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditActivityDelegate;
        
        private EndOperationDelegate onEndEditActivityDelegate;
        
        private System.Threading.SendOrPostCallback onEditActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveActivityDelegate;
        
        private EndOperationDelegate onEndRemoveActivityDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginHideActivityDelegate;
        
        private EndOperationDelegate onEndHideActivityDelegate;
        
        private System.Threading.SendOrPostCallback onHideActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginShowActivityDelegate;
        
        private EndOperationDelegate onEndShowActivityDelegate;
        
        private System.Threading.SendOrPostCallback onShowActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ActivityServiceClient() {
        }
        
        public ActivityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ActivityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActivityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActivityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetActivityListCompletedEventArgs> GetActivityListCompleted;
        
        public event System.EventHandler<GetParticipateRecordListCompletedEventArgs> GetParticipateRecordListCompleted;
        
        public event System.EventHandler<AddActivityCompletedEventArgs> AddActivityCompleted;
        
        public event System.EventHandler<EditActivity_BasicCompletedEventArgs> EditActivity_BasicCompleted;
        
        public event System.EventHandler<EditActivityCompletedEventArgs> EditActivityCompleted;
        
        public event System.EventHandler<RemoveActivityCompletedEventArgs> RemoveActivityCompleted;
        
        public event System.EventHandler<HideActivityCompletedEventArgs> HideActivityCompleted;
        
        public event System.EventHandler<ShowActivityCompletedEventArgs> ShowActivityCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.ActivityService.IActivityService.BeginGetActivityList(string keyword, IWorld.Admin.Framework.ActivityService.ActivityTypeSelectType type, IWorld.Admin.Framework.ActivityService.RegularlyStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActivityList(keyword, type, status, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.ActivityService.PaginationListOfActivityResultp9CVq9mK IWorld.Admin.Framework.ActivityService.IActivityService.EndGetActivityList(System.IAsyncResult result) {
            return base.Channel.EndGetActivityList(result);
        }
        
        private System.IAsyncResult OnBeginGetActivityList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyword = ((string)(inValues[0]));
            IWorld.Admin.Framework.ActivityService.ActivityTypeSelectType type = ((IWorld.Admin.Framework.ActivityService.ActivityTypeSelectType)(inValues[1]));
            IWorld.Admin.Framework.ActivityService.RegularlyStatusSelectType status = ((IWorld.Admin.Framework.ActivityService.RegularlyStatusSelectType)(inValues[2]));
            int page = ((int)(inValues[3]));
            string token = ((string)(inValues[4]));
            return ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).BeginGetActivityList(keyword, type, status, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetActivityList(System.IAsyncResult result) {
            IWorld.Admin.Framework.ActivityService.PaginationListOfActivityResultp9CVq9mK retVal = ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).EndGetActivityList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActivityListCompleted(object state) {
            if ((this.GetActivityListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActivityListCompleted(this, new GetActivityListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActivityListAsync(string keyword, IWorld.Admin.Framework.ActivityService.ActivityTypeSelectType type, IWorld.Admin.Framework.ActivityService.RegularlyStatusSelectType status, int page, string token) {
            this.GetActivityListAsync(keyword, type, status, page, token, null);
        }
        
        public void GetActivityListAsync(string keyword, IWorld.Admin.Framework.ActivityService.ActivityTypeSelectType type, IWorld.Admin.Framework.ActivityService.RegularlyStatusSelectType status, int page, string token, object userState) {
            if ((this.onBeginGetActivityListDelegate == null)) {
                this.onBeginGetActivityListDelegate = new BeginOperationDelegate(this.OnBeginGetActivityList);
            }
            if ((this.onEndGetActivityListDelegate == null)) {
                this.onEndGetActivityListDelegate = new EndOperationDelegate(this.OnEndGetActivityList);
            }
            if ((this.onGetActivityListCompletedDelegate == null)) {
                this.onGetActivityListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActivityListCompleted);
            }
            base.InvokeAsync(this.onBeginGetActivityListDelegate, new object[] {
                        keyword,
                        type,
                        status,
                        page,
                        token}, this.onEndGetActivityListDelegate, this.onGetActivityListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.ActivityService.IActivityService.BeginGetParticipateRecordList(int activityId, int ownerId, string beginTime, string endTime, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetParticipateRecordList(activityId, ownerId, beginTime, endTime, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.ActivityService.PaginationListOfActivityParticipateRecordResultp9CVq9mK IWorld.Admin.Framework.ActivityService.IActivityService.EndGetParticipateRecordList(System.IAsyncResult result) {
            return base.Channel.EndGetParticipateRecordList(result);
        }
        
        private System.IAsyncResult OnBeginGetParticipateRecordList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int activityId = ((int)(inValues[0]));
            int ownerId = ((int)(inValues[1]));
            string beginTime = ((string)(inValues[2]));
            string endTime = ((string)(inValues[3]));
            int page = ((int)(inValues[4]));
            string token = ((string)(inValues[5]));
            return ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).BeginGetParticipateRecordList(activityId, ownerId, beginTime, endTime, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetParticipateRecordList(System.IAsyncResult result) {
            IWorld.Admin.Framework.ActivityService.PaginationListOfActivityParticipateRecordResultp9CVq9mK retVal = ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).EndGetParticipateRecordList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetParticipateRecordListCompleted(object state) {
            if ((this.GetParticipateRecordListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetParticipateRecordListCompleted(this, new GetParticipateRecordListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetParticipateRecordListAsync(int activityId, int ownerId, string beginTime, string endTime, int page, string token) {
            this.GetParticipateRecordListAsync(activityId, ownerId, beginTime, endTime, page, token, null);
        }
        
        public void GetParticipateRecordListAsync(int activityId, int ownerId, string beginTime, string endTime, int page, string token, object userState) {
            if ((this.onBeginGetParticipateRecordListDelegate == null)) {
                this.onBeginGetParticipateRecordListDelegate = new BeginOperationDelegate(this.OnBeginGetParticipateRecordList);
            }
            if ((this.onEndGetParticipateRecordListDelegate == null)) {
                this.onEndGetParticipateRecordListDelegate = new EndOperationDelegate(this.OnEndGetParticipateRecordList);
            }
            if ((this.onGetParticipateRecordListCompletedDelegate == null)) {
                this.onGetParticipateRecordListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetParticipateRecordListCompleted);
            }
            base.InvokeAsync(this.onBeginGetParticipateRecordListDelegate, new object[] {
                        activityId,
                        ownerId,
                        beginTime,
                        endTime,
                        page,
                        token}, this.onEndGetParticipateRecordListDelegate, this.onGetParticipateRecordListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.ActivityService.IActivityService.BeginAddActivity(IWorld.Admin.Framework.ActivityService.AddActivityImport import, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddActivity(import, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.ActivityService.OperateResult IWorld.Admin.Framework.ActivityService.IActivityService.EndAddActivity(System.IAsyncResult result) {
            return base.Channel.EndAddActivity(result);
        }
        
        private System.IAsyncResult OnBeginAddActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IWorld.Admin.Framework.ActivityService.AddActivityImport import = ((IWorld.Admin.Framework.ActivityService.AddActivityImport)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).BeginAddActivity(import, token, callback, asyncState);
        }
        
        private object[] OnEndAddActivity(System.IAsyncResult result) {
            IWorld.Admin.Framework.ActivityService.OperateResult retVal = ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).EndAddActivity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddActivityCompleted(object state) {
            if ((this.AddActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddActivityCompleted(this, new AddActivityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddActivityAsync(IWorld.Admin.Framework.ActivityService.AddActivityImport import, string token) {
            this.AddActivityAsync(import, token, null);
        }
        
        public void AddActivityAsync(IWorld.Admin.Framework.ActivityService.AddActivityImport import, string token, object userState) {
            if ((this.onBeginAddActivityDelegate == null)) {
                this.onBeginAddActivityDelegate = new BeginOperationDelegate(this.OnBeginAddActivity);
            }
            if ((this.onEndAddActivityDelegate == null)) {
                this.onEndAddActivityDelegate = new EndOperationDelegate(this.OnEndAddActivity);
            }
            if ((this.onAddActivityCompletedDelegate == null)) {
                this.onAddActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddActivityCompleted);
            }
            base.InvokeAsync(this.onBeginAddActivityDelegate, new object[] {
                        import,
                        token}, this.onEndAddActivityDelegate, this.onAddActivityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.ActivityService.IActivityService.BeginEditActivity_Basic(IWorld.Admin.Framework.ActivityService.EditActivityImport_Basic import, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditActivity_Basic(import, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.ActivityService.OperateResult IWorld.Admin.Framework.ActivityService.IActivityService.EndEditActivity_Basic(System.IAsyncResult result) {
            return base.Channel.EndEditActivity_Basic(result);
        }
        
        private System.IAsyncResult OnBeginEditActivity_Basic(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IWorld.Admin.Framework.ActivityService.EditActivityImport_Basic import = ((IWorld.Admin.Framework.ActivityService.EditActivityImport_Basic)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).BeginEditActivity_Basic(import, token, callback, asyncState);
        }
        
        private object[] OnEndEditActivity_Basic(System.IAsyncResult result) {
            IWorld.Admin.Framework.ActivityService.OperateResult retVal = ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).EndEditActivity_Basic(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditActivity_BasicCompleted(object state) {
            if ((this.EditActivity_BasicCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditActivity_BasicCompleted(this, new EditActivity_BasicCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditActivity_BasicAsync(IWorld.Admin.Framework.ActivityService.EditActivityImport_Basic import, string token) {
            this.EditActivity_BasicAsync(import, token, null);
        }
        
        public void EditActivity_BasicAsync(IWorld.Admin.Framework.ActivityService.EditActivityImport_Basic import, string token, object userState) {
            if ((this.onBeginEditActivity_BasicDelegate == null)) {
                this.onBeginEditActivity_BasicDelegate = new BeginOperationDelegate(this.OnBeginEditActivity_Basic);
            }
            if ((this.onEndEditActivity_BasicDelegate == null)) {
                this.onEndEditActivity_BasicDelegate = new EndOperationDelegate(this.OnEndEditActivity_Basic);
            }
            if ((this.onEditActivity_BasicCompletedDelegate == null)) {
                this.onEditActivity_BasicCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditActivity_BasicCompleted);
            }
            base.InvokeAsync(this.onBeginEditActivity_BasicDelegate, new object[] {
                        import,
                        token}, this.onEndEditActivity_BasicDelegate, this.onEditActivity_BasicCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.ActivityService.IActivityService.BeginEditActivity(IWorld.Admin.Framework.ActivityService.EditActivityImport import, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditActivity(import, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.ActivityService.OperateResult IWorld.Admin.Framework.ActivityService.IActivityService.EndEditActivity(System.IAsyncResult result) {
            return base.Channel.EndEditActivity(result);
        }
        
        private System.IAsyncResult OnBeginEditActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            IWorld.Admin.Framework.ActivityService.EditActivityImport import = ((IWorld.Admin.Framework.ActivityService.EditActivityImport)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).BeginEditActivity(import, token, callback, asyncState);
        }
        
        private object[] OnEndEditActivity(System.IAsyncResult result) {
            IWorld.Admin.Framework.ActivityService.OperateResult retVal = ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).EndEditActivity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditActivityCompleted(object state) {
            if ((this.EditActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditActivityCompleted(this, new EditActivityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditActivityAsync(IWorld.Admin.Framework.ActivityService.EditActivityImport import, string token) {
            this.EditActivityAsync(import, token, null);
        }
        
        public void EditActivityAsync(IWorld.Admin.Framework.ActivityService.EditActivityImport import, string token, object userState) {
            if ((this.onBeginEditActivityDelegate == null)) {
                this.onBeginEditActivityDelegate = new BeginOperationDelegate(this.OnBeginEditActivity);
            }
            if ((this.onEndEditActivityDelegate == null)) {
                this.onEndEditActivityDelegate = new EndOperationDelegate(this.OnEndEditActivity);
            }
            if ((this.onEditActivityCompletedDelegate == null)) {
                this.onEditActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditActivityCompleted);
            }
            base.InvokeAsync(this.onBeginEditActivityDelegate, new object[] {
                        import,
                        token}, this.onEndEditActivityDelegate, this.onEditActivityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.ActivityService.IActivityService.BeginRemoveActivity(int activityId, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveActivity(activityId, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.ActivityService.OperateResult IWorld.Admin.Framework.ActivityService.IActivityService.EndRemoveActivity(System.IAsyncResult result) {
            return base.Channel.EndRemoveActivity(result);
        }
        
        private System.IAsyncResult OnBeginRemoveActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int activityId = ((int)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).BeginRemoveActivity(activityId, token, callback, asyncState);
        }
        
        private object[] OnEndRemoveActivity(System.IAsyncResult result) {
            IWorld.Admin.Framework.ActivityService.OperateResult retVal = ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).EndRemoveActivity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveActivityCompleted(object state) {
            if ((this.RemoveActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveActivityCompleted(this, new RemoveActivityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveActivityAsync(int activityId, string token) {
            this.RemoveActivityAsync(activityId, token, null);
        }
        
        public void RemoveActivityAsync(int activityId, string token, object userState) {
            if ((this.onBeginRemoveActivityDelegate == null)) {
                this.onBeginRemoveActivityDelegate = new BeginOperationDelegate(this.OnBeginRemoveActivity);
            }
            if ((this.onEndRemoveActivityDelegate == null)) {
                this.onEndRemoveActivityDelegate = new EndOperationDelegate(this.OnEndRemoveActivity);
            }
            if ((this.onRemoveActivityCompletedDelegate == null)) {
                this.onRemoveActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveActivityCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveActivityDelegate, new object[] {
                        activityId,
                        token}, this.onEndRemoveActivityDelegate, this.onRemoveActivityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.ActivityService.IActivityService.BeginHideActivity(int activityId, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHideActivity(activityId, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.ActivityService.OperateResult IWorld.Admin.Framework.ActivityService.IActivityService.EndHideActivity(System.IAsyncResult result) {
            return base.Channel.EndHideActivity(result);
        }
        
        private System.IAsyncResult OnBeginHideActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int activityId = ((int)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).BeginHideActivity(activityId, token, callback, asyncState);
        }
        
        private object[] OnEndHideActivity(System.IAsyncResult result) {
            IWorld.Admin.Framework.ActivityService.OperateResult retVal = ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).EndHideActivity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnHideActivityCompleted(object state) {
            if ((this.HideActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HideActivityCompleted(this, new HideActivityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HideActivityAsync(int activityId, string token) {
            this.HideActivityAsync(activityId, token, null);
        }
        
        public void HideActivityAsync(int activityId, string token, object userState) {
            if ((this.onBeginHideActivityDelegate == null)) {
                this.onBeginHideActivityDelegate = new BeginOperationDelegate(this.OnBeginHideActivity);
            }
            if ((this.onEndHideActivityDelegate == null)) {
                this.onEndHideActivityDelegate = new EndOperationDelegate(this.OnEndHideActivity);
            }
            if ((this.onHideActivityCompletedDelegate == null)) {
                this.onHideActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHideActivityCompleted);
            }
            base.InvokeAsync(this.onBeginHideActivityDelegate, new object[] {
                        activityId,
                        token}, this.onEndHideActivityDelegate, this.onHideActivityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.ActivityService.IActivityService.BeginShowActivity(int activityId, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShowActivity(activityId, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.ActivityService.OperateResult IWorld.Admin.Framework.ActivityService.IActivityService.EndShowActivity(System.IAsyncResult result) {
            return base.Channel.EndShowActivity(result);
        }
        
        private System.IAsyncResult OnBeginShowActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int activityId = ((int)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).BeginShowActivity(activityId, token, callback, asyncState);
        }
        
        private object[] OnEndShowActivity(System.IAsyncResult result) {
            IWorld.Admin.Framework.ActivityService.OperateResult retVal = ((IWorld.Admin.Framework.ActivityService.IActivityService)(this)).EndShowActivity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnShowActivityCompleted(object state) {
            if ((this.ShowActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShowActivityCompleted(this, new ShowActivityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShowActivityAsync(int activityId, string token) {
            this.ShowActivityAsync(activityId, token, null);
        }
        
        public void ShowActivityAsync(int activityId, string token, object userState) {
            if ((this.onBeginShowActivityDelegate == null)) {
                this.onBeginShowActivityDelegate = new BeginOperationDelegate(this.OnBeginShowActivity);
            }
            if ((this.onEndShowActivityDelegate == null)) {
                this.onEndShowActivityDelegate = new EndOperationDelegate(this.OnEndShowActivity);
            }
            if ((this.onShowActivityCompletedDelegate == null)) {
                this.onShowActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShowActivityCompleted);
            }
            base.InvokeAsync(this.onBeginShowActivityDelegate, new object[] {
                        activityId,
                        token}, this.onEndShowActivityDelegate, this.onShowActivityCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IWorld.Admin.Framework.ActivityService.IActivityService CreateChannel() {
            return new ActivityServiceClientChannel(this);
        }
        
        private class ActivityServiceClientChannel : ChannelBase<IWorld.Admin.Framework.ActivityService.IActivityService>, IWorld.Admin.Framework.ActivityService.IActivityService {
            
            public ActivityServiceClientChannel(System.ServiceModel.ClientBase<IWorld.Admin.Framework.ActivityService.IActivityService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetActivityList(string keyword, IWorld.Admin.Framework.ActivityService.ActivityTypeSelectType type, IWorld.Admin.Framework.ActivityService.RegularlyStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = keyword;
                _args[1] = type;
                _args[2] = status;
                _args[3] = page;
                _args[4] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetActivityList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.ActivityService.PaginationListOfActivityResultp9CVq9mK EndGetActivityList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.ActivityService.PaginationListOfActivityResultp9CVq9mK _result = ((IWorld.Admin.Framework.ActivityService.PaginationListOfActivityResultp9CVq9mK)(base.EndInvoke("GetActivityList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetParticipateRecordList(int activityId, int ownerId, string beginTime, string endTime, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = activityId;
                _args[1] = ownerId;
                _args[2] = beginTime;
                _args[3] = endTime;
                _args[4] = page;
                _args[5] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetParticipateRecordList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.ActivityService.PaginationListOfActivityParticipateRecordResultp9CVq9mK EndGetParticipateRecordList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.ActivityService.PaginationListOfActivityParticipateRecordResultp9CVq9mK _result = ((IWorld.Admin.Framework.ActivityService.PaginationListOfActivityParticipateRecordResultp9CVq9mK)(base.EndInvoke("GetParticipateRecordList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddActivity(IWorld.Admin.Framework.ActivityService.AddActivityImport import, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = import;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("AddActivity", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.ActivityService.OperateResult EndAddActivity(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.ActivityService.OperateResult _result = ((IWorld.Admin.Framework.ActivityService.OperateResult)(base.EndInvoke("AddActivity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditActivity_Basic(IWorld.Admin.Framework.ActivityService.EditActivityImport_Basic import, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = import;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("EditActivity_Basic", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.ActivityService.OperateResult EndEditActivity_Basic(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.ActivityService.OperateResult _result = ((IWorld.Admin.Framework.ActivityService.OperateResult)(base.EndInvoke("EditActivity_Basic", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditActivity(IWorld.Admin.Framework.ActivityService.EditActivityImport import, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = import;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("EditActivity", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.ActivityService.OperateResult EndEditActivity(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.ActivityService.OperateResult _result = ((IWorld.Admin.Framework.ActivityService.OperateResult)(base.EndInvoke("EditActivity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveActivity(int activityId, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = activityId;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("RemoveActivity", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.ActivityService.OperateResult EndRemoveActivity(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.ActivityService.OperateResult _result = ((IWorld.Admin.Framework.ActivityService.OperateResult)(base.EndInvoke("RemoveActivity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginHideActivity(int activityId, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = activityId;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("HideActivity", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.ActivityService.OperateResult EndHideActivity(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.ActivityService.OperateResult _result = ((IWorld.Admin.Framework.ActivityService.OperateResult)(base.EndInvoke("HideActivity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginShowActivity(int activityId, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = activityId;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("ShowActivity", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.ActivityService.OperateResult EndShowActivity(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.ActivityService.OperateResult _result = ((IWorld.Admin.Framework.ActivityService.OperateResult)(base.EndInvoke("ShowActivity", _args, result)));
                return _result;
            }
        }
    }
}
