//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18051
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace IWorld.Admin.Framework.DataReportService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperateResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.PaginationListOfSiteDataResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.PaginationListOfPersonalDataResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.PaginationListOfBettingResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.PaginationListOfChasingResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.PaginationListOfBettingForChasingResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.PaginationListOfRechargeResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.UntreatedRecharCountResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.PaginationListOfWithdrawalResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.UntreatedWithdrawalCountResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.PaginationListOfTransferResultp9CVq9mK))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(IWorld.Admin.Framework.DataReportService.ComprehensiveInformationResult))]
    public partial class OperateResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorField;
        
        private bool SuccessField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfSiteDataResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfSiteDataResultp9CVq9mK : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.SiteDataResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.SiteDataResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfPersonalDataResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfPersonalDataResultp9CVq9mK : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.PersonalDataResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.PersonalDataResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfBettingResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfBettingResultp9CVq9mK : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.BettingResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.BettingResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfChasingResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfChasingResultp9CVq9mK : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.ChasingResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.ChasingResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfBettingForChasingResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfBettingForChasingResultp9CVq9mK : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.BettingForChasingResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.BettingForChasingResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfRechargeResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfRechargeResultp9CVq9mK : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.RechargeResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.RechargeResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UntreatedRecharCountResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class UntreatedRecharCountResult : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private int CountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfWithdrawalResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfWithdrawalResultp9CVq9mK : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.WithdrawalResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.WithdrawalResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UntreatedWithdrawalCountResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class UntreatedWithdrawalCountResult : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private int CountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaginationListOfTransferResultp9CVq9mK", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PaginationListOfTransferResultp9CVq9mK : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.TransferResult> ContentField;
        
        private int PageIndexField;
        
        private int PageSizeField;
        
        private int TotalField;
        
        private int TotalOfPageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<IWorld.Admin.Framework.DataReportService.TransferResult> Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageIndex {
            get {
                return this.PageIndexField;
            }
            set {
                if ((this.PageIndexField.Equals(value) != true)) {
                    this.PageIndexField = value;
                    this.RaisePropertyChanged("PageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalOfPage {
            get {
                return this.TotalOfPageField;
            }
            set {
                if ((this.TotalOfPageField.Equals(value) != true)) {
                    this.TotalOfPageField = value;
                    this.RaisePropertyChanged("TotalOfPage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComprehensiveInformationResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class ComprehensiveInformationResult : IWorld.Admin.Framework.DataReportService.OperateResult {
        
        private double AmountOfBetsAtAllField;
        
        private double AmountOfBetsAtDayField;
        
        private double AmountOfBetsAtMonthField;
        
        private double BonusAtAllField;
        
        private double BonusAtDayField;
        
        private double BonusAtMonthField;
        
        private double CashAtAllField;
        
        private double CashAtDayField;
        
        private double CashAtMonthField;
        
        private double ExpendituresAtAllField;
        
        private double ExpendituresAtDayField;
        
        private double ExpendituresAtMonthField;
        
        private double GainsAndLossesAtAllField;
        
        private double GainsAndLossesAtDayField;
        
        private double GainsAndLossesAtMonthField;
        
        private double RebateAtAllField;
        
        private double RebateAtDayField;
        
        private double RebateAtMonthField;
        
        private double RechargeAtAllField;
        
        private double RechargeAtDayField;
        
        private double RechargeAtMonthField;
        
        private double SetInAtAllField;
        
        private double SetInAtDayField;
        
        private double SetInAtMonthField;
        
        private double SetUpAtAllField;
        
        private double SetUpAtDayField;
        
        private double SetUpAtMonthField;
        
        private double TransferAtAllField;
        
        private double TransferAtDayField;
        
        private double TransferAtMonthField;
        
        private double WithdrawalAtAllField;
        
        private double WithdrawalAtDayField;
        
        private double WithdrawalAtMonthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AmountOfBetsAtAll {
            get {
                return this.AmountOfBetsAtAllField;
            }
            set {
                if ((this.AmountOfBetsAtAllField.Equals(value) != true)) {
                    this.AmountOfBetsAtAllField = value;
                    this.RaisePropertyChanged("AmountOfBetsAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AmountOfBetsAtDay {
            get {
                return this.AmountOfBetsAtDayField;
            }
            set {
                if ((this.AmountOfBetsAtDayField.Equals(value) != true)) {
                    this.AmountOfBetsAtDayField = value;
                    this.RaisePropertyChanged("AmountOfBetsAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AmountOfBetsAtMonth {
            get {
                return this.AmountOfBetsAtMonthField;
            }
            set {
                if ((this.AmountOfBetsAtMonthField.Equals(value) != true)) {
                    this.AmountOfBetsAtMonthField = value;
                    this.RaisePropertyChanged("AmountOfBetsAtMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BonusAtAll {
            get {
                return this.BonusAtAllField;
            }
            set {
                if ((this.BonusAtAllField.Equals(value) != true)) {
                    this.BonusAtAllField = value;
                    this.RaisePropertyChanged("BonusAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BonusAtDay {
            get {
                return this.BonusAtDayField;
            }
            set {
                if ((this.BonusAtDayField.Equals(value) != true)) {
                    this.BonusAtDayField = value;
                    this.RaisePropertyChanged("BonusAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BonusAtMonth {
            get {
                return this.BonusAtMonthField;
            }
            set {
                if ((this.BonusAtMonthField.Equals(value) != true)) {
                    this.BonusAtMonthField = value;
                    this.RaisePropertyChanged("BonusAtMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CashAtAll {
            get {
                return this.CashAtAllField;
            }
            set {
                if ((this.CashAtAllField.Equals(value) != true)) {
                    this.CashAtAllField = value;
                    this.RaisePropertyChanged("CashAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CashAtDay {
            get {
                return this.CashAtDayField;
            }
            set {
                if ((this.CashAtDayField.Equals(value) != true)) {
                    this.CashAtDayField = value;
                    this.RaisePropertyChanged("CashAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CashAtMonth {
            get {
                return this.CashAtMonthField;
            }
            set {
                if ((this.CashAtMonthField.Equals(value) != true)) {
                    this.CashAtMonthField = value;
                    this.RaisePropertyChanged("CashAtMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ExpendituresAtAll {
            get {
                return this.ExpendituresAtAllField;
            }
            set {
                if ((this.ExpendituresAtAllField.Equals(value) != true)) {
                    this.ExpendituresAtAllField = value;
                    this.RaisePropertyChanged("ExpendituresAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ExpendituresAtDay {
            get {
                return this.ExpendituresAtDayField;
            }
            set {
                if ((this.ExpendituresAtDayField.Equals(value) != true)) {
                    this.ExpendituresAtDayField = value;
                    this.RaisePropertyChanged("ExpendituresAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ExpendituresAtMonth {
            get {
                return this.ExpendituresAtMonthField;
            }
            set {
                if ((this.ExpendituresAtMonthField.Equals(value) != true)) {
                    this.ExpendituresAtMonthField = value;
                    this.RaisePropertyChanged("ExpendituresAtMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GainsAndLossesAtAll {
            get {
                return this.GainsAndLossesAtAllField;
            }
            set {
                if ((this.GainsAndLossesAtAllField.Equals(value) != true)) {
                    this.GainsAndLossesAtAllField = value;
                    this.RaisePropertyChanged("GainsAndLossesAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GainsAndLossesAtDay {
            get {
                return this.GainsAndLossesAtDayField;
            }
            set {
                if ((this.GainsAndLossesAtDayField.Equals(value) != true)) {
                    this.GainsAndLossesAtDayField = value;
                    this.RaisePropertyChanged("GainsAndLossesAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GainsAndLossesAtMonth {
            get {
                return this.GainsAndLossesAtMonthField;
            }
            set {
                if ((this.GainsAndLossesAtMonthField.Equals(value) != true)) {
                    this.GainsAndLossesAtMonthField = value;
                    this.RaisePropertyChanged("GainsAndLossesAtMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RebateAtAll {
            get {
                return this.RebateAtAllField;
            }
            set {
                if ((this.RebateAtAllField.Equals(value) != true)) {
                    this.RebateAtAllField = value;
                    this.RaisePropertyChanged("RebateAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RebateAtDay {
            get {
                return this.RebateAtDayField;
            }
            set {
                if ((this.RebateAtDayField.Equals(value) != true)) {
                    this.RebateAtDayField = value;
                    this.RaisePropertyChanged("RebateAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RebateAtMonth {
            get {
                return this.RebateAtMonthField;
            }
            set {
                if ((this.RebateAtMonthField.Equals(value) != true)) {
                    this.RebateAtMonthField = value;
                    this.RaisePropertyChanged("RebateAtMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RechargeAtAll {
            get {
                return this.RechargeAtAllField;
            }
            set {
                if ((this.RechargeAtAllField.Equals(value) != true)) {
                    this.RechargeAtAllField = value;
                    this.RaisePropertyChanged("RechargeAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RechargeAtDay {
            get {
                return this.RechargeAtDayField;
            }
            set {
                if ((this.RechargeAtDayField.Equals(value) != true)) {
                    this.RechargeAtDayField = value;
                    this.RaisePropertyChanged("RechargeAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double RechargeAtMonth {
            get {
                return this.RechargeAtMonthField;
            }
            set {
                if ((this.RechargeAtMonthField.Equals(value) != true)) {
                    this.RechargeAtMonthField = value;
                    this.RaisePropertyChanged("RechargeAtMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SetInAtAll {
            get {
                return this.SetInAtAllField;
            }
            set {
                if ((this.SetInAtAllField.Equals(value) != true)) {
                    this.SetInAtAllField = value;
                    this.RaisePropertyChanged("SetInAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SetInAtDay {
            get {
                return this.SetInAtDayField;
            }
            set {
                if ((this.SetInAtDayField.Equals(value) != true)) {
                    this.SetInAtDayField = value;
                    this.RaisePropertyChanged("SetInAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SetInAtMonth {
            get {
                return this.SetInAtMonthField;
            }
            set {
                if ((this.SetInAtMonthField.Equals(value) != true)) {
                    this.SetInAtMonthField = value;
                    this.RaisePropertyChanged("SetInAtMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SetUpAtAll {
            get {
                return this.SetUpAtAllField;
            }
            set {
                if ((this.SetUpAtAllField.Equals(value) != true)) {
                    this.SetUpAtAllField = value;
                    this.RaisePropertyChanged("SetUpAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SetUpAtDay {
            get {
                return this.SetUpAtDayField;
            }
            set {
                if ((this.SetUpAtDayField.Equals(value) != true)) {
                    this.SetUpAtDayField = value;
                    this.RaisePropertyChanged("SetUpAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SetUpAtMonth {
            get {
                return this.SetUpAtMonthField;
            }
            set {
                if ((this.SetUpAtMonthField.Equals(value) != true)) {
                    this.SetUpAtMonthField = value;
                    this.RaisePropertyChanged("SetUpAtMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TransferAtAll {
            get {
                return this.TransferAtAllField;
            }
            set {
                if ((this.TransferAtAllField.Equals(value) != true)) {
                    this.TransferAtAllField = value;
                    this.RaisePropertyChanged("TransferAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TransferAtDay {
            get {
                return this.TransferAtDayField;
            }
            set {
                if ((this.TransferAtDayField.Equals(value) != true)) {
                    this.TransferAtDayField = value;
                    this.RaisePropertyChanged("TransferAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TransferAtMonth {
            get {
                return this.TransferAtMonthField;
            }
            set {
                if ((this.TransferAtMonthField.Equals(value) != true)) {
                    this.TransferAtMonthField = value;
                    this.RaisePropertyChanged("TransferAtMonth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WithdrawalAtAll {
            get {
                return this.WithdrawalAtAllField;
            }
            set {
                if ((this.WithdrawalAtAllField.Equals(value) != true)) {
                    this.WithdrawalAtAllField = value;
                    this.RaisePropertyChanged("WithdrawalAtAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WithdrawalAtDay {
            get {
                return this.WithdrawalAtDayField;
            }
            set {
                if ((this.WithdrawalAtDayField.Equals(value) != true)) {
                    this.WithdrawalAtDayField = value;
                    this.RaisePropertyChanged("WithdrawalAtDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WithdrawalAtMonth {
            get {
                return this.WithdrawalAtMonthField;
            }
            set {
                if ((this.WithdrawalAtMonthField.Equals(value) != true)) {
                    this.WithdrawalAtMonthField = value;
                    this.RaisePropertyChanged("WithdrawalAtMonth");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SiteDataResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class SiteDataResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AmountOfBetsField;
        
        private double BonusField;
        
        private double CashField;
        
        private int CountOfSetInField;
        
        private int CountOfSetUpField;
        
        private string DateField;
        
        private double ExpendituresField;
        
        private double GainsAndLossesField;
        
        private double RechargeField;
        
        private double TransferField;
        
        private double WithdrawalField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AmountOfBets {
            get {
                return this.AmountOfBetsField;
            }
            set {
                if ((this.AmountOfBetsField.Equals(value) != true)) {
                    this.AmountOfBetsField = value;
                    this.RaisePropertyChanged("AmountOfBets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bonus {
            get {
                return this.BonusField;
            }
            set {
                if ((this.BonusField.Equals(value) != true)) {
                    this.BonusField = value;
                    this.RaisePropertyChanged("Bonus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Cash {
            get {
                return this.CashField;
            }
            set {
                if ((this.CashField.Equals(value) != true)) {
                    this.CashField = value;
                    this.RaisePropertyChanged("Cash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountOfSetIn {
            get {
                return this.CountOfSetInField;
            }
            set {
                if ((this.CountOfSetInField.Equals(value) != true)) {
                    this.CountOfSetInField = value;
                    this.RaisePropertyChanged("CountOfSetIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountOfSetUp {
            get {
                return this.CountOfSetUpField;
            }
            set {
                if ((this.CountOfSetUpField.Equals(value) != true)) {
                    this.CountOfSetUpField = value;
                    this.RaisePropertyChanged("CountOfSetUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Expenditures {
            get {
                return this.ExpendituresField;
            }
            set {
                if ((this.ExpendituresField.Equals(value) != true)) {
                    this.ExpendituresField = value;
                    this.RaisePropertyChanged("Expenditures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GainsAndLosses {
            get {
                return this.GainsAndLossesField;
            }
            set {
                if ((this.GainsAndLossesField.Equals(value) != true)) {
                    this.GainsAndLossesField = value;
                    this.RaisePropertyChanged("GainsAndLosses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Recharge {
            get {
                return this.RechargeField;
            }
            set {
                if ((this.RechargeField.Equals(value) != true)) {
                    this.RechargeField = value;
                    this.RaisePropertyChanged("Recharge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Transfer {
            get {
                return this.TransferField;
            }
            set {
                if ((this.TransferField.Equals(value) != true)) {
                    this.TransferField = value;
                    this.RaisePropertyChanged("Transfer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Withdrawal {
            get {
                return this.WithdrawalField;
            }
            set {
                if ((this.WithdrawalField.Equals(value) != true)) {
                    this.WithdrawalField = value;
                    this.RaisePropertyChanged("Withdrawal");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonalDataResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class PersonalDataResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AmountOfBetsField;
        
        private double BonusField;
        
        private string DateField;
        
        private double ExpendituresField;
        
        private double GainsAndLossesField;
        
        private int LayerField;
        
        private double MoneyField;
        
        private string OwnerField;
        
        private int OwnerIdField;
        
        private double RechargeField;
        
        private int SubordinateField;
        
        private double WithdrawalField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AmountOfBets {
            get {
                return this.AmountOfBetsField;
            }
            set {
                if ((this.AmountOfBetsField.Equals(value) != true)) {
                    this.AmountOfBetsField = value;
                    this.RaisePropertyChanged("AmountOfBets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bonus {
            get {
                return this.BonusField;
            }
            set {
                if ((this.BonusField.Equals(value) != true)) {
                    this.BonusField = value;
                    this.RaisePropertyChanged("Bonus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Expenditures {
            get {
                return this.ExpendituresField;
            }
            set {
                if ((this.ExpendituresField.Equals(value) != true)) {
                    this.ExpendituresField = value;
                    this.RaisePropertyChanged("Expenditures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GainsAndLosses {
            get {
                return this.GainsAndLossesField;
            }
            set {
                if ((this.GainsAndLossesField.Equals(value) != true)) {
                    this.GainsAndLossesField = value;
                    this.RaisePropertyChanged("GainsAndLosses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Layer {
            get {
                return this.LayerField;
            }
            set {
                if ((this.LayerField.Equals(value) != true)) {
                    this.LayerField = value;
                    this.RaisePropertyChanged("Layer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Money {
            get {
                return this.MoneyField;
            }
            set {
                if ((this.MoneyField.Equals(value) != true)) {
                    this.MoneyField = value;
                    this.RaisePropertyChanged("Money");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Recharge {
            get {
                return this.RechargeField;
            }
            set {
                if ((this.RechargeField.Equals(value) != true)) {
                    this.RechargeField = value;
                    this.RaisePropertyChanged("Recharge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Subordinate {
            get {
                return this.SubordinateField;
            }
            set {
                if ((this.SubordinateField.Equals(value) != true)) {
                    this.SubordinateField = value;
                    this.RaisePropertyChanged("Subordinate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Withdrawal {
            get {
                return this.WithdrawalField;
            }
            set {
                if ((this.WithdrawalField.Equals(value) != true)) {
                    this.WithdrawalField = value;
                    this.RaisePropertyChanged("Withdrawal");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BettingResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class BettingResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int BettingIdField;
        
        private double BonusField;
        
        private string HowToPlayField;
        
        private int HowToPlayIdField;
        
        private double MultipleField;
        
        private string OwnerField;
        
        private int OwnerIdField;
        
        private double PayField;
        
        private string PhasesField;
        
        private double PointsField;
        
        private string SeatsField;
        
        private IWorld.Admin.Framework.DataReportService.BettingStatus StatusField;
        
        private int SumField;
        
        private string TagField;
        
        private int TagIdField;
        
        private string TicketField;
        
        private int TicketIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BettingId {
            get {
                return this.BettingIdField;
            }
            set {
                if ((this.BettingIdField.Equals(value) != true)) {
                    this.BettingIdField = value;
                    this.RaisePropertyChanged("BettingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bonus {
            get {
                return this.BonusField;
            }
            set {
                if ((this.BonusField.Equals(value) != true)) {
                    this.BonusField = value;
                    this.RaisePropertyChanged("Bonus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HowToPlay {
            get {
                return this.HowToPlayField;
            }
            set {
                if ((object.ReferenceEquals(this.HowToPlayField, value) != true)) {
                    this.HowToPlayField = value;
                    this.RaisePropertyChanged("HowToPlay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HowToPlayId {
            get {
                return this.HowToPlayIdField;
            }
            set {
                if ((this.HowToPlayIdField.Equals(value) != true)) {
                    this.HowToPlayIdField = value;
                    this.RaisePropertyChanged("HowToPlayId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Multiple {
            get {
                return this.MultipleField;
            }
            set {
                if ((this.MultipleField.Equals(value) != true)) {
                    this.MultipleField = value;
                    this.RaisePropertyChanged("Multiple");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Pay {
            get {
                return this.PayField;
            }
            set {
                if ((this.PayField.Equals(value) != true)) {
                    this.PayField = value;
                    this.RaisePropertyChanged("Pay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phases {
            get {
                return this.PhasesField;
            }
            set {
                if ((object.ReferenceEquals(this.PhasesField, value) != true)) {
                    this.PhasesField = value;
                    this.RaisePropertyChanged("Phases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Seats {
            get {
                return this.SeatsField;
            }
            set {
                if ((object.ReferenceEquals(this.SeatsField, value) != true)) {
                    this.SeatsField = value;
                    this.RaisePropertyChanged("Seats");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.DataReportService.BettingStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag {
            get {
                return this.TagField;
            }
            set {
                if ((object.ReferenceEquals(this.TagField, value) != true)) {
                    this.TagField = value;
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagId {
            get {
                return this.TagIdField;
            }
            set {
                if ((this.TagIdField.Equals(value) != true)) {
                    this.TagIdField = value;
                    this.RaisePropertyChanged("TagId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticket {
            get {
                return this.TicketField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketField, value) != true)) {
                    this.TicketField = value;
                    this.RaisePropertyChanged("Ticket");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TicketId {
            get {
                return this.TicketIdField;
            }
            set {
                if ((this.TicketIdField.Equals(value) != true)) {
                    this.TicketIdField = value;
                    this.RaisePropertyChanged("TicketId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BettingStatus", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum BettingStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        用户撤单 = -2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        未中奖 = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        等待开奖 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        即将开奖 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        中奖 = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChasingResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class ChasingResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double BonusField;
        
        private int ChasingIdField;
        
        private int ContinuanceField;
        
        private bool EndIfLotteryAtGoingField;
        
        private bool EndIfLotteryBeforeBeginField;
        
        private string HowToPlayField;
        
        private int HowToPlayIdField;
        
        private double MultipleField;
        
        private string OwnerField;
        
        private int OwnerIdField;
        
        private double PayField;
        
        private double PointsField;
        
        private int PostponeField;
        
        private string SeatsField;
        
        private IWorld.Admin.Framework.DataReportService.ChasingStatus StatusField;
        
        private int SumField;
        
        private string TagField;
        
        private int TagIdField;
        
        private string TicketField;
        
        private int TicketIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bonus {
            get {
                return this.BonusField;
            }
            set {
                if ((this.BonusField.Equals(value) != true)) {
                    this.BonusField = value;
                    this.RaisePropertyChanged("Bonus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChasingId {
            get {
                return this.ChasingIdField;
            }
            set {
                if ((this.ChasingIdField.Equals(value) != true)) {
                    this.ChasingIdField = value;
                    this.RaisePropertyChanged("ChasingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Continuance {
            get {
                return this.ContinuanceField;
            }
            set {
                if ((this.ContinuanceField.Equals(value) != true)) {
                    this.ContinuanceField = value;
                    this.RaisePropertyChanged("Continuance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EndIfLotteryAtGoing {
            get {
                return this.EndIfLotteryAtGoingField;
            }
            set {
                if ((this.EndIfLotteryAtGoingField.Equals(value) != true)) {
                    this.EndIfLotteryAtGoingField = value;
                    this.RaisePropertyChanged("EndIfLotteryAtGoing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EndIfLotteryBeforeBegin {
            get {
                return this.EndIfLotteryBeforeBeginField;
            }
            set {
                if ((this.EndIfLotteryBeforeBeginField.Equals(value) != true)) {
                    this.EndIfLotteryBeforeBeginField = value;
                    this.RaisePropertyChanged("EndIfLotteryBeforeBegin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HowToPlay {
            get {
                return this.HowToPlayField;
            }
            set {
                if ((object.ReferenceEquals(this.HowToPlayField, value) != true)) {
                    this.HowToPlayField = value;
                    this.RaisePropertyChanged("HowToPlay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HowToPlayId {
            get {
                return this.HowToPlayIdField;
            }
            set {
                if ((this.HowToPlayIdField.Equals(value) != true)) {
                    this.HowToPlayIdField = value;
                    this.RaisePropertyChanged("HowToPlayId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Multiple {
            get {
                return this.MultipleField;
            }
            set {
                if ((this.MultipleField.Equals(value) != true)) {
                    this.MultipleField = value;
                    this.RaisePropertyChanged("Multiple");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Pay {
            get {
                return this.PayField;
            }
            set {
                if ((this.PayField.Equals(value) != true)) {
                    this.PayField = value;
                    this.RaisePropertyChanged("Pay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Postpone {
            get {
                return this.PostponeField;
            }
            set {
                if ((this.PostponeField.Equals(value) != true)) {
                    this.PostponeField = value;
                    this.RaisePropertyChanged("Postpone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Seats {
            get {
                return this.SeatsField;
            }
            set {
                if ((object.ReferenceEquals(this.SeatsField, value) != true)) {
                    this.SeatsField = value;
                    this.RaisePropertyChanged("Seats");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.DataReportService.ChasingStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tag {
            get {
                return this.TagField;
            }
            set {
                if ((object.ReferenceEquals(this.TagField, value) != true)) {
                    this.TagField = value;
                    this.RaisePropertyChanged("Tag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagId {
            get {
                return this.TagIdField;
            }
            set {
                if ((this.TagIdField.Equals(value) != true)) {
                    this.TagIdField = value;
                    this.RaisePropertyChanged("TagId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticket {
            get {
                return this.TicketField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketField, value) != true)) {
                    this.TicketField = value;
                    this.RaisePropertyChanged("Ticket");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TicketId {
            get {
                return this.TicketIdField;
            }
            set {
                if ((this.TicketIdField.Equals(value) != true)) {
                    this.TicketIdField = value;
                    this.RaisePropertyChanged("TicketId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChasingStatus", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum ChasingStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        未开始 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        追号中 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        因为所追号码已经开出而终止 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        因为中奖而终止 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        用户中止追号 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        追号结束 = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BettingForChasingResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class BettingForChasingResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int BettingIdField;
        
        private double BonusField;
        
        private int ChasingIdField;
        
        private double ExponentField;
        
        private double PayField;
        
        private string PhasesField;
        
        private IWorld.Admin.Framework.DataReportService.BettingStatus StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BettingId {
            get {
                return this.BettingIdField;
            }
            set {
                if ((this.BettingIdField.Equals(value) != true)) {
                    this.BettingIdField = value;
                    this.RaisePropertyChanged("BettingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bonus {
            get {
                return this.BonusField;
            }
            set {
                if ((this.BonusField.Equals(value) != true)) {
                    this.BonusField = value;
                    this.RaisePropertyChanged("Bonus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChasingId {
            get {
                return this.ChasingIdField;
            }
            set {
                if ((this.ChasingIdField.Equals(value) != true)) {
                    this.ChasingIdField = value;
                    this.RaisePropertyChanged("ChasingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Exponent {
            get {
                return this.ExponentField;
            }
            set {
                if ((this.ExponentField.Equals(value) != true)) {
                    this.ExponentField = value;
                    this.RaisePropertyChanged("Exponent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Pay {
            get {
                return this.PayField;
            }
            set {
                if ((this.PayField.Equals(value) != true)) {
                    this.PayField = value;
                    this.RaisePropertyChanged("Pay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phases {
            get {
                return this.PhasesField;
            }
            set {
                if ((object.ReferenceEquals(this.PhasesField, value) != true)) {
                    this.PhasesField = value;
                    this.RaisePropertyChanged("Phases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.DataReportService.BettingStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RechargeResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class RechargeResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private IWorld.Admin.Framework.DataReportService.Bank BankField;
        
        private string CardField;
        
        private string CodeField;
        
        private string NameField;
        
        private string OwnerField;
        
        private int OwnerIdField;
        
        private string PayerField;
        
        private int PayerIdField;
        
        private int RechargeIdField;
        
        private string RemarkField;
        
        private IWorld.Admin.Framework.DataReportService.RechargeStatus StatusField;
        
        private double SumField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.DataReportService.Bank Bank {
            get {
                return this.BankField;
            }
            set {
                if ((this.BankField.Equals(value) != true)) {
                    this.BankField = value;
                    this.RaisePropertyChanged("Bank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Card {
            get {
                return this.CardField;
            }
            set {
                if ((object.ReferenceEquals(this.CardField, value) != true)) {
                    this.CardField = value;
                    this.RaisePropertyChanged("Card");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Payer {
            get {
                return this.PayerField;
            }
            set {
                if ((object.ReferenceEquals(this.PayerField, value) != true)) {
                    this.PayerField = value;
                    this.RaisePropertyChanged("Payer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PayerId {
            get {
                return this.PayerIdField;
            }
            set {
                if ((this.PayerIdField.Equals(value) != true)) {
                    this.PayerIdField = value;
                    this.RaisePropertyChanged("PayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RechargeId {
            get {
                return this.RechargeIdField;
            }
            set {
                if ((this.RechargeIdField.Equals(value) != true)) {
                    this.RechargeIdField = value;
                    this.RaisePropertyChanged("RechargeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.DataReportService.RechargeStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bank", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum Bank : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        无 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        中国工商银行 = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        中国农业银行 = 102,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        中国银行 = 103,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        中国建设银行 = 104,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        交通银行 = 105,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        财付通 = 201,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RechargeStatus", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum RechargeStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        失败 = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        等待支付 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        充值成功 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        用户已经支付 = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WithdrawalResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class WithdrawalResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private IWorld.Admin.Framework.DataReportService.Bank BankField;
        
        private string CardField;
        
        private string NameField;
        
        private string OwnerField;
        
        private int OwnerIdField;
        
        private string RemarkField;
        
        private IWorld.Admin.Framework.DataReportService.WithdrawalsStatus StatusField;
        
        private double SumField;
        
        private int WithdrawalIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.DataReportService.Bank Bank {
            get {
                return this.BankField;
            }
            set {
                if ((this.BankField.Equals(value) != true)) {
                    this.BankField = value;
                    this.RaisePropertyChanged("Bank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Card {
            get {
                return this.CardField;
            }
            set {
                if ((object.ReferenceEquals(this.CardField, value) != true)) {
                    this.CardField = value;
                    this.RaisePropertyChanged("Card");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IWorld.Admin.Framework.DataReportService.WithdrawalsStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WithdrawalId {
            get {
                return this.WithdrawalIdField;
            }
            set {
                if ((this.WithdrawalIdField.Equals(value) != true)) {
                    this.WithdrawalIdField = value;
                    this.RaisePropertyChanged("WithdrawalId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WithdrawalsStatus", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Model")]
    public enum WithdrawalsStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        失败 = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        处理中 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        提现成功 = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferResult", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public partial class TransferResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string OwnerField;
        
        private int OwnerIdField;
        
        private string RemarkField;
        
        private double SumField;
        
        private int TransferIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Owner {
            get {
                return this.OwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerField, value) != true)) {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Sum {
            get {
                return this.SumField;
            }
            set {
                if ((this.SumField.Equals(value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransferId {
            get {
                return this.TransferIdField;
            }
            set {
                if ((this.TransferIdField.Equals(value) != true)) {
                    this.TransferIdField = value;
                    this.RaisePropertyChanged("TransferId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimePeriodSelectType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public enum TimePeriodSelectType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        月 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        日 = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BettingStatusSelectType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public enum BettingStatusSelectType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        全部 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        用户撤单 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        未中奖 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        等待开奖 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        即将开奖 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        中奖 = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChasingStatusSelectType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public enum ChasingStatusSelectType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        全部 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        未开始 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        追号中 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        因为所追号码已经开出而终止 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        因为中奖而终止 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        用户中止追号 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        追号结束 = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RechargeStatusSelectType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public enum RechargeStatusSelectType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        全部 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        失败 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        等待支付 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        充值成功 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        用户已经支付 = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WithdrawalsStatusSelectType", Namespace="http://schemas.datacontract.org/2004/07/IWorld.Contract.Admin")]
    public enum WithdrawalsStatusSelectType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        全部 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        失败 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        处理中 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        提现成功 = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataReportService.IDataReportService")]
    public interface IDataReportService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetComprehensiveInformation", ReplyAction="http://tempuri.org/IDataReportService/GetComprehensiveInformationResponse")]
        System.IAsyncResult BeginGetComprehensiveInformation(string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.ComprehensiveInformationResult EndGetComprehensiveInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetSiteDataList", ReplyAction="http://tempuri.org/IDataReportService/GetSiteDataListResponse")]
        System.IAsyncResult BeginGetSiteDataList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.PaginationListOfSiteDataResultp9CVq9mK EndGetSiteDataList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetPersonalDataList", ReplyAction="http://tempuri.org/IDataReportService/GetPersonalDataListResponse")]
        System.IAsyncResult BeginGetPersonalDataList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod, int userId, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.PaginationListOfPersonalDataResultp9CVq9mK EndGetPersonalDataList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetBettingList", ReplyAction="http://tempuri.org/IDataReportService/GetBettingListResponse")]
        System.IAsyncResult BeginGetBettingList(string beginTime, string endTime, int ownerId, int ticketId, int tagId, int howToPlatId, IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.PaginationListOfBettingResultp9CVq9mK EndGetBettingList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetChasingList", ReplyAction="http://tempuri.org/IDataReportService/GetChasingListResponse")]
        System.IAsyncResult BeginGetChasingList(string beginTime, string endTime, int ownerId, int ticketId, int tagId, int howToPlatId, IWorld.Admin.Framework.DataReportService.ChasingStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.PaginationListOfChasingResultp9CVq9mK EndGetChasingList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetBettingForChasingList", ReplyAction="http://tempuri.org/IDataReportService/GetBettingForChasingListResponse")]
        System.IAsyncResult BeginGetBettingForChasingList(int chasingId, IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.PaginationListOfBettingForChasingResultp9CVq9mK EndGetBettingForChasingList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetRechargeList", ReplyAction="http://tempuri.org/IDataReportService/GetRechargeListResponse")]
        System.IAsyncResult BeginGetRechargeList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.RechargeStatusSelectType status, int userId, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.PaginationListOfRechargeResultp9CVq9mK EndGetRechargeList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetUntreatedRecharCount", ReplyAction="http://tempuri.org/IDataReportService/GetUntreatedRecharCountResponse")]
        System.IAsyncResult BeginGetUntreatedRecharCount(string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.UntreatedRecharCountResult EndGetUntreatedRecharCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/DeterminetRecharge", ReplyAction="http://tempuri.org/IDataReportService/DeterminetRechargeResponse")]
        System.IAsyncResult BeginDeterminetRecharge(int rechargeId, string card, string name, IWorld.Admin.Framework.DataReportService.Bank bank, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.OperateResult EndDeterminetRecharge(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/NegativeRecharge", ReplyAction="http://tempuri.org/IDataReportService/NegativeRechargeResponse")]
        System.IAsyncResult BeginNegativeRecharge(int rechargeId, string remark, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.OperateResult EndNegativeRecharge(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetWithdrawalList", ReplyAction="http://tempuri.org/IDataReportService/GetWithdrawalListResponse")]
        System.IAsyncResult BeginGetWithdrawalList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.WithdrawalsStatusSelectType status, int userId, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.PaginationListOfWithdrawalResultp9CVq9mK EndGetWithdrawalList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetUntreatedWithdrawalCount", ReplyAction="http://tempuri.org/IDataReportService/GetUntreatedWithdrawalCountResponse")]
        System.IAsyncResult BeginGetUntreatedWithdrawalCount(string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.UntreatedWithdrawalCountResult EndGetUntreatedWithdrawalCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/DeterminetWithdrawal", ReplyAction="http://tempuri.org/IDataReportService/DeterminetWithdrawalResponse")]
        System.IAsyncResult BeginDeterminetWithdrawal(int withdrawalId, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.OperateResult EndDeterminetWithdrawal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/NegativeWithdrawal", ReplyAction="http://tempuri.org/IDataReportService/NegativeWithdrawalResponse")]
        System.IAsyncResult BeginNegativeWithdrawal(int withdrawalId, string remark, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.OperateResult EndNegativeWithdrawal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/GetTransferList", ReplyAction="http://tempuri.org/IDataReportService/GetTransferListResponse")]
        System.IAsyncResult BeginGetTransferList(string beginTime, string endTime, int userId, int page, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.PaginationListOfTransferResultp9CVq9mK EndGetTransferList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataReportService/AddTransfer", ReplyAction="http://tempuri.org/IDataReportService/AddTransferResponse")]
        System.IAsyncResult BeginAddTransfer(double sum, string remark, string token, System.AsyncCallback callback, object asyncState);
        
        IWorld.Admin.Framework.DataReportService.OperateResult EndAddTransfer(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataReportServiceChannel : IWorld.Admin.Framework.DataReportService.IDataReportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetComprehensiveInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetComprehensiveInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.ComprehensiveInformationResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.ComprehensiveInformationResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSiteDataListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSiteDataListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.PaginationListOfSiteDataResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.PaginationListOfSiteDataResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPersonalDataListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPersonalDataListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.PaginationListOfPersonalDataResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.PaginationListOfPersonalDataResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBettingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBettingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.PaginationListOfBettingResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.PaginationListOfBettingResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetChasingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetChasingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.PaginationListOfChasingResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.PaginationListOfChasingResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBettingForChasingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBettingForChasingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.PaginationListOfBettingForChasingResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.PaginationListOfBettingForChasingResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRechargeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRechargeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.PaginationListOfRechargeResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.PaginationListOfRechargeResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUntreatedRecharCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUntreatedRecharCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.UntreatedRecharCountResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.UntreatedRecharCountResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeterminetRechargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeterminetRechargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NegativeRechargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NegativeRechargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWithdrawalListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWithdrawalListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.PaginationListOfWithdrawalResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.PaginationListOfWithdrawalResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUntreatedWithdrawalCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUntreatedWithdrawalCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.UntreatedWithdrawalCountResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.UntreatedWithdrawalCountResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeterminetWithdrawalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeterminetWithdrawalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NegativeWithdrawalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NegativeWithdrawalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTransferListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTransferListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.PaginationListOfTransferResultp9CVq9mK Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.PaginationListOfTransferResultp9CVq9mK)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public IWorld.Admin.Framework.DataReportService.OperateResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((IWorld.Admin.Framework.DataReportService.OperateResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataReportServiceClient : System.ServiceModel.ClientBase<IWorld.Admin.Framework.DataReportService.IDataReportService>, IWorld.Admin.Framework.DataReportService.IDataReportService {
        
        private BeginOperationDelegate onBeginGetComprehensiveInformationDelegate;
        
        private EndOperationDelegate onEndGetComprehensiveInformationDelegate;
        
        private System.Threading.SendOrPostCallback onGetComprehensiveInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSiteDataListDelegate;
        
        private EndOperationDelegate onEndGetSiteDataListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSiteDataListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPersonalDataListDelegate;
        
        private EndOperationDelegate onEndGetPersonalDataListDelegate;
        
        private System.Threading.SendOrPostCallback onGetPersonalDataListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBettingListDelegate;
        
        private EndOperationDelegate onEndGetBettingListDelegate;
        
        private System.Threading.SendOrPostCallback onGetBettingListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetChasingListDelegate;
        
        private EndOperationDelegate onEndGetChasingListDelegate;
        
        private System.Threading.SendOrPostCallback onGetChasingListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBettingForChasingListDelegate;
        
        private EndOperationDelegate onEndGetBettingForChasingListDelegate;
        
        private System.Threading.SendOrPostCallback onGetBettingForChasingListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRechargeListDelegate;
        
        private EndOperationDelegate onEndGetRechargeListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRechargeListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUntreatedRecharCountDelegate;
        
        private EndOperationDelegate onEndGetUntreatedRecharCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetUntreatedRecharCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeterminetRechargeDelegate;
        
        private EndOperationDelegate onEndDeterminetRechargeDelegate;
        
        private System.Threading.SendOrPostCallback onDeterminetRechargeCompletedDelegate;
        
        private BeginOperationDelegate onBeginNegativeRechargeDelegate;
        
        private EndOperationDelegate onEndNegativeRechargeDelegate;
        
        private System.Threading.SendOrPostCallback onNegativeRechargeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWithdrawalListDelegate;
        
        private EndOperationDelegate onEndGetWithdrawalListDelegate;
        
        private System.Threading.SendOrPostCallback onGetWithdrawalListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUntreatedWithdrawalCountDelegate;
        
        private EndOperationDelegate onEndGetUntreatedWithdrawalCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetUntreatedWithdrawalCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeterminetWithdrawalDelegate;
        
        private EndOperationDelegate onEndDeterminetWithdrawalDelegate;
        
        private System.Threading.SendOrPostCallback onDeterminetWithdrawalCompletedDelegate;
        
        private BeginOperationDelegate onBeginNegativeWithdrawalDelegate;
        
        private EndOperationDelegate onEndNegativeWithdrawalDelegate;
        
        private System.Threading.SendOrPostCallback onNegativeWithdrawalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTransferListDelegate;
        
        private EndOperationDelegate onEndGetTransferListDelegate;
        
        private System.Threading.SendOrPostCallback onGetTransferListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTransferDelegate;
        
        private EndOperationDelegate onEndAddTransferDelegate;
        
        private System.Threading.SendOrPostCallback onAddTransferCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DataReportServiceClient() {
        }
        
        public DataReportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataReportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataReportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataReportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetComprehensiveInformationCompletedEventArgs> GetComprehensiveInformationCompleted;
        
        public event System.EventHandler<GetSiteDataListCompletedEventArgs> GetSiteDataListCompleted;
        
        public event System.EventHandler<GetPersonalDataListCompletedEventArgs> GetPersonalDataListCompleted;
        
        public event System.EventHandler<GetBettingListCompletedEventArgs> GetBettingListCompleted;
        
        public event System.EventHandler<GetChasingListCompletedEventArgs> GetChasingListCompleted;
        
        public event System.EventHandler<GetBettingForChasingListCompletedEventArgs> GetBettingForChasingListCompleted;
        
        public event System.EventHandler<GetRechargeListCompletedEventArgs> GetRechargeListCompleted;
        
        public event System.EventHandler<GetUntreatedRecharCountCompletedEventArgs> GetUntreatedRecharCountCompleted;
        
        public event System.EventHandler<DeterminetRechargeCompletedEventArgs> DeterminetRechargeCompleted;
        
        public event System.EventHandler<NegativeRechargeCompletedEventArgs> NegativeRechargeCompleted;
        
        public event System.EventHandler<GetWithdrawalListCompletedEventArgs> GetWithdrawalListCompleted;
        
        public event System.EventHandler<GetUntreatedWithdrawalCountCompletedEventArgs> GetUntreatedWithdrawalCountCompleted;
        
        public event System.EventHandler<DeterminetWithdrawalCompletedEventArgs> DeterminetWithdrawalCompleted;
        
        public event System.EventHandler<NegativeWithdrawalCompletedEventArgs> NegativeWithdrawalCompleted;
        
        public event System.EventHandler<GetTransferListCompletedEventArgs> GetTransferListCompleted;
        
        public event System.EventHandler<AddTransferCompletedEventArgs> AddTransferCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetComprehensiveInformation(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetComprehensiveInformation(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.ComprehensiveInformationResult IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetComprehensiveInformation(System.IAsyncResult result) {
            return base.Channel.EndGetComprehensiveInformation(result);
        }
        
        private System.IAsyncResult OnBeginGetComprehensiveInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetComprehensiveInformation(token, callback, asyncState);
        }
        
        private object[] OnEndGetComprehensiveInformation(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.ComprehensiveInformationResult retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetComprehensiveInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetComprehensiveInformationCompleted(object state) {
            if ((this.GetComprehensiveInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetComprehensiveInformationCompleted(this, new GetComprehensiveInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetComprehensiveInformationAsync(string token) {
            this.GetComprehensiveInformationAsync(token, null);
        }
        
        public void GetComprehensiveInformationAsync(string token, object userState) {
            if ((this.onBeginGetComprehensiveInformationDelegate == null)) {
                this.onBeginGetComprehensiveInformationDelegate = new BeginOperationDelegate(this.OnBeginGetComprehensiveInformation);
            }
            if ((this.onEndGetComprehensiveInformationDelegate == null)) {
                this.onEndGetComprehensiveInformationDelegate = new EndOperationDelegate(this.OnEndGetComprehensiveInformation);
            }
            if ((this.onGetComprehensiveInformationCompletedDelegate == null)) {
                this.onGetComprehensiveInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetComprehensiveInformationCompleted);
            }
            base.InvokeAsync(this.onBeginGetComprehensiveInformationDelegate, new object[] {
                        token}, this.onEndGetComprehensiveInformationDelegate, this.onGetComprehensiveInformationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetSiteDataList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSiteDataList(beginTime, endTime, timePeriod, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.PaginationListOfSiteDataResultp9CVq9mK IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetSiteDataList(System.IAsyncResult result) {
            return base.Channel.EndGetSiteDataList(result);
        }
        
        private System.IAsyncResult OnBeginGetSiteDataList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string beginTime = ((string)(inValues[0]));
            string endTime = ((string)(inValues[1]));
            IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod = ((IWorld.Admin.Framework.DataReportService.TimePeriodSelectType)(inValues[2]));
            int page = ((int)(inValues[3]));
            string token = ((string)(inValues[4]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetSiteDataList(beginTime, endTime, timePeriod, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetSiteDataList(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.PaginationListOfSiteDataResultp9CVq9mK retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetSiteDataList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSiteDataListCompleted(object state) {
            if ((this.GetSiteDataListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSiteDataListCompleted(this, new GetSiteDataListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSiteDataListAsync(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod, int page, string token) {
            this.GetSiteDataListAsync(beginTime, endTime, timePeriod, page, token, null);
        }
        
        public void GetSiteDataListAsync(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod, int page, string token, object userState) {
            if ((this.onBeginGetSiteDataListDelegate == null)) {
                this.onBeginGetSiteDataListDelegate = new BeginOperationDelegate(this.OnBeginGetSiteDataList);
            }
            if ((this.onEndGetSiteDataListDelegate == null)) {
                this.onEndGetSiteDataListDelegate = new EndOperationDelegate(this.OnEndGetSiteDataList);
            }
            if ((this.onGetSiteDataListCompletedDelegate == null)) {
                this.onGetSiteDataListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSiteDataListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSiteDataListDelegate, new object[] {
                        beginTime,
                        endTime,
                        timePeriod,
                        page,
                        token}, this.onEndGetSiteDataListDelegate, this.onGetSiteDataListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetPersonalDataList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod, int userId, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPersonalDataList(beginTime, endTime, timePeriod, userId, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.PaginationListOfPersonalDataResultp9CVq9mK IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetPersonalDataList(System.IAsyncResult result) {
            return base.Channel.EndGetPersonalDataList(result);
        }
        
        private System.IAsyncResult OnBeginGetPersonalDataList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string beginTime = ((string)(inValues[0]));
            string endTime = ((string)(inValues[1]));
            IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod = ((IWorld.Admin.Framework.DataReportService.TimePeriodSelectType)(inValues[2]));
            int userId = ((int)(inValues[3]));
            int page = ((int)(inValues[4]));
            string token = ((string)(inValues[5]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetPersonalDataList(beginTime, endTime, timePeriod, userId, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetPersonalDataList(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.PaginationListOfPersonalDataResultp9CVq9mK retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetPersonalDataList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPersonalDataListCompleted(object state) {
            if ((this.GetPersonalDataListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPersonalDataListCompleted(this, new GetPersonalDataListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPersonalDataListAsync(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod, int userId, int page, string token) {
            this.GetPersonalDataListAsync(beginTime, endTime, timePeriod, userId, page, token, null);
        }
        
        public void GetPersonalDataListAsync(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod, int userId, int page, string token, object userState) {
            if ((this.onBeginGetPersonalDataListDelegate == null)) {
                this.onBeginGetPersonalDataListDelegate = new BeginOperationDelegate(this.OnBeginGetPersonalDataList);
            }
            if ((this.onEndGetPersonalDataListDelegate == null)) {
                this.onEndGetPersonalDataListDelegate = new EndOperationDelegate(this.OnEndGetPersonalDataList);
            }
            if ((this.onGetPersonalDataListCompletedDelegate == null)) {
                this.onGetPersonalDataListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPersonalDataListCompleted);
            }
            base.InvokeAsync(this.onBeginGetPersonalDataListDelegate, new object[] {
                        beginTime,
                        endTime,
                        timePeriod,
                        userId,
                        page,
                        token}, this.onEndGetPersonalDataListDelegate, this.onGetPersonalDataListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetBettingList(string beginTime, string endTime, int ownerId, int ticketId, int tagId, int howToPlatId, IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBettingList(beginTime, endTime, ownerId, ticketId, tagId, howToPlatId, status, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.PaginationListOfBettingResultp9CVq9mK IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetBettingList(System.IAsyncResult result) {
            return base.Channel.EndGetBettingList(result);
        }
        
        private System.IAsyncResult OnBeginGetBettingList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string beginTime = ((string)(inValues[0]));
            string endTime = ((string)(inValues[1]));
            int ownerId = ((int)(inValues[2]));
            int ticketId = ((int)(inValues[3]));
            int tagId = ((int)(inValues[4]));
            int howToPlatId = ((int)(inValues[5]));
            IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status = ((IWorld.Admin.Framework.DataReportService.BettingStatusSelectType)(inValues[6]));
            int page = ((int)(inValues[7]));
            string token = ((string)(inValues[8]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetBettingList(beginTime, endTime, ownerId, ticketId, tagId, howToPlatId, status, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetBettingList(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.PaginationListOfBettingResultp9CVq9mK retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetBettingList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBettingListCompleted(object state) {
            if ((this.GetBettingListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBettingListCompleted(this, new GetBettingListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBettingListAsync(string beginTime, string endTime, int ownerId, int ticketId, int tagId, int howToPlatId, IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status, int page, string token) {
            this.GetBettingListAsync(beginTime, endTime, ownerId, ticketId, tagId, howToPlatId, status, page, token, null);
        }
        
        public void GetBettingListAsync(string beginTime, string endTime, int ownerId, int ticketId, int tagId, int howToPlatId, IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status, int page, string token, object userState) {
            if ((this.onBeginGetBettingListDelegate == null)) {
                this.onBeginGetBettingListDelegate = new BeginOperationDelegate(this.OnBeginGetBettingList);
            }
            if ((this.onEndGetBettingListDelegate == null)) {
                this.onEndGetBettingListDelegate = new EndOperationDelegate(this.OnEndGetBettingList);
            }
            if ((this.onGetBettingListCompletedDelegate == null)) {
                this.onGetBettingListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBettingListCompleted);
            }
            base.InvokeAsync(this.onBeginGetBettingListDelegate, new object[] {
                        beginTime,
                        endTime,
                        ownerId,
                        ticketId,
                        tagId,
                        howToPlatId,
                        status,
                        page,
                        token}, this.onEndGetBettingListDelegate, this.onGetBettingListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetChasingList(string beginTime, string endTime, int ownerId, int ticketId, int tagId, int howToPlatId, IWorld.Admin.Framework.DataReportService.ChasingStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetChasingList(beginTime, endTime, ownerId, ticketId, tagId, howToPlatId, status, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.PaginationListOfChasingResultp9CVq9mK IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetChasingList(System.IAsyncResult result) {
            return base.Channel.EndGetChasingList(result);
        }
        
        private System.IAsyncResult OnBeginGetChasingList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string beginTime = ((string)(inValues[0]));
            string endTime = ((string)(inValues[1]));
            int ownerId = ((int)(inValues[2]));
            int ticketId = ((int)(inValues[3]));
            int tagId = ((int)(inValues[4]));
            int howToPlatId = ((int)(inValues[5]));
            IWorld.Admin.Framework.DataReportService.ChasingStatusSelectType status = ((IWorld.Admin.Framework.DataReportService.ChasingStatusSelectType)(inValues[6]));
            int page = ((int)(inValues[7]));
            string token = ((string)(inValues[8]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetChasingList(beginTime, endTime, ownerId, ticketId, tagId, howToPlatId, status, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetChasingList(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.PaginationListOfChasingResultp9CVq9mK retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetChasingList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetChasingListCompleted(object state) {
            if ((this.GetChasingListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetChasingListCompleted(this, new GetChasingListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetChasingListAsync(string beginTime, string endTime, int ownerId, int ticketId, int tagId, int howToPlatId, IWorld.Admin.Framework.DataReportService.ChasingStatusSelectType status, int page, string token) {
            this.GetChasingListAsync(beginTime, endTime, ownerId, ticketId, tagId, howToPlatId, status, page, token, null);
        }
        
        public void GetChasingListAsync(string beginTime, string endTime, int ownerId, int ticketId, int tagId, int howToPlatId, IWorld.Admin.Framework.DataReportService.ChasingStatusSelectType status, int page, string token, object userState) {
            if ((this.onBeginGetChasingListDelegate == null)) {
                this.onBeginGetChasingListDelegate = new BeginOperationDelegate(this.OnBeginGetChasingList);
            }
            if ((this.onEndGetChasingListDelegate == null)) {
                this.onEndGetChasingListDelegate = new EndOperationDelegate(this.OnEndGetChasingList);
            }
            if ((this.onGetChasingListCompletedDelegate == null)) {
                this.onGetChasingListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetChasingListCompleted);
            }
            base.InvokeAsync(this.onBeginGetChasingListDelegate, new object[] {
                        beginTime,
                        endTime,
                        ownerId,
                        ticketId,
                        tagId,
                        howToPlatId,
                        status,
                        page,
                        token}, this.onEndGetChasingListDelegate, this.onGetChasingListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetBettingForChasingList(int chasingId, IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBettingForChasingList(chasingId, status, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.PaginationListOfBettingForChasingResultp9CVq9mK IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetBettingForChasingList(System.IAsyncResult result) {
            return base.Channel.EndGetBettingForChasingList(result);
        }
        
        private System.IAsyncResult OnBeginGetBettingForChasingList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int chasingId = ((int)(inValues[0]));
            IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status = ((IWorld.Admin.Framework.DataReportService.BettingStatusSelectType)(inValues[1]));
            int page = ((int)(inValues[2]));
            string token = ((string)(inValues[3]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetBettingForChasingList(chasingId, status, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetBettingForChasingList(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.PaginationListOfBettingForChasingResultp9CVq9mK retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetBettingForChasingList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBettingForChasingListCompleted(object state) {
            if ((this.GetBettingForChasingListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBettingForChasingListCompleted(this, new GetBettingForChasingListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBettingForChasingListAsync(int chasingId, IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status, int page, string token) {
            this.GetBettingForChasingListAsync(chasingId, status, page, token, null);
        }
        
        public void GetBettingForChasingListAsync(int chasingId, IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status, int page, string token, object userState) {
            if ((this.onBeginGetBettingForChasingListDelegate == null)) {
                this.onBeginGetBettingForChasingListDelegate = new BeginOperationDelegate(this.OnBeginGetBettingForChasingList);
            }
            if ((this.onEndGetBettingForChasingListDelegate == null)) {
                this.onEndGetBettingForChasingListDelegate = new EndOperationDelegate(this.OnEndGetBettingForChasingList);
            }
            if ((this.onGetBettingForChasingListCompletedDelegate == null)) {
                this.onGetBettingForChasingListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBettingForChasingListCompleted);
            }
            base.InvokeAsync(this.onBeginGetBettingForChasingListDelegate, new object[] {
                        chasingId,
                        status,
                        page,
                        token}, this.onEndGetBettingForChasingListDelegate, this.onGetBettingForChasingListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetRechargeList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.RechargeStatusSelectType status, int userId, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRechargeList(beginTime, endTime, status, userId, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.PaginationListOfRechargeResultp9CVq9mK IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetRechargeList(System.IAsyncResult result) {
            return base.Channel.EndGetRechargeList(result);
        }
        
        private System.IAsyncResult OnBeginGetRechargeList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string beginTime = ((string)(inValues[0]));
            string endTime = ((string)(inValues[1]));
            IWorld.Admin.Framework.DataReportService.RechargeStatusSelectType status = ((IWorld.Admin.Framework.DataReportService.RechargeStatusSelectType)(inValues[2]));
            int userId = ((int)(inValues[3]));
            int page = ((int)(inValues[4]));
            string token = ((string)(inValues[5]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetRechargeList(beginTime, endTime, status, userId, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetRechargeList(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.PaginationListOfRechargeResultp9CVq9mK retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetRechargeList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRechargeListCompleted(object state) {
            if ((this.GetRechargeListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRechargeListCompleted(this, new GetRechargeListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRechargeListAsync(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.RechargeStatusSelectType status, int userId, int page, string token) {
            this.GetRechargeListAsync(beginTime, endTime, status, userId, page, token, null);
        }
        
        public void GetRechargeListAsync(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.RechargeStatusSelectType status, int userId, int page, string token, object userState) {
            if ((this.onBeginGetRechargeListDelegate == null)) {
                this.onBeginGetRechargeListDelegate = new BeginOperationDelegate(this.OnBeginGetRechargeList);
            }
            if ((this.onEndGetRechargeListDelegate == null)) {
                this.onEndGetRechargeListDelegate = new EndOperationDelegate(this.OnEndGetRechargeList);
            }
            if ((this.onGetRechargeListCompletedDelegate == null)) {
                this.onGetRechargeListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRechargeListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRechargeListDelegate, new object[] {
                        beginTime,
                        endTime,
                        status,
                        userId,
                        page,
                        token}, this.onEndGetRechargeListDelegate, this.onGetRechargeListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetUntreatedRecharCount(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUntreatedRecharCount(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.UntreatedRecharCountResult IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetUntreatedRecharCount(System.IAsyncResult result) {
            return base.Channel.EndGetUntreatedRecharCount(result);
        }
        
        private System.IAsyncResult OnBeginGetUntreatedRecharCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetUntreatedRecharCount(token, callback, asyncState);
        }
        
        private object[] OnEndGetUntreatedRecharCount(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.UntreatedRecharCountResult retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetUntreatedRecharCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUntreatedRecharCountCompleted(object state) {
            if ((this.GetUntreatedRecharCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUntreatedRecharCountCompleted(this, new GetUntreatedRecharCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUntreatedRecharCountAsync(string token) {
            this.GetUntreatedRecharCountAsync(token, null);
        }
        
        public void GetUntreatedRecharCountAsync(string token, object userState) {
            if ((this.onBeginGetUntreatedRecharCountDelegate == null)) {
                this.onBeginGetUntreatedRecharCountDelegate = new BeginOperationDelegate(this.OnBeginGetUntreatedRecharCount);
            }
            if ((this.onEndGetUntreatedRecharCountDelegate == null)) {
                this.onEndGetUntreatedRecharCountDelegate = new EndOperationDelegate(this.OnEndGetUntreatedRecharCount);
            }
            if ((this.onGetUntreatedRecharCountCompletedDelegate == null)) {
                this.onGetUntreatedRecharCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUntreatedRecharCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetUntreatedRecharCountDelegate, new object[] {
                        token}, this.onEndGetUntreatedRecharCountDelegate, this.onGetUntreatedRecharCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginDeterminetRecharge(int rechargeId, string card, string name, IWorld.Admin.Framework.DataReportService.Bank bank, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeterminetRecharge(rechargeId, card, name, bank, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.OperateResult IWorld.Admin.Framework.DataReportService.IDataReportService.EndDeterminetRecharge(System.IAsyncResult result) {
            return base.Channel.EndDeterminetRecharge(result);
        }
        
        private System.IAsyncResult OnBeginDeterminetRecharge(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int rechargeId = ((int)(inValues[0]));
            string card = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            IWorld.Admin.Framework.DataReportService.Bank bank = ((IWorld.Admin.Framework.DataReportService.Bank)(inValues[3]));
            string token = ((string)(inValues[4]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginDeterminetRecharge(rechargeId, card, name, bank, token, callback, asyncState);
        }
        
        private object[] OnEndDeterminetRecharge(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.OperateResult retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndDeterminetRecharge(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeterminetRechargeCompleted(object state) {
            if ((this.DeterminetRechargeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeterminetRechargeCompleted(this, new DeterminetRechargeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeterminetRechargeAsync(int rechargeId, string card, string name, IWorld.Admin.Framework.DataReportService.Bank bank, string token) {
            this.DeterminetRechargeAsync(rechargeId, card, name, bank, token, null);
        }
        
        public void DeterminetRechargeAsync(int rechargeId, string card, string name, IWorld.Admin.Framework.DataReportService.Bank bank, string token, object userState) {
            if ((this.onBeginDeterminetRechargeDelegate == null)) {
                this.onBeginDeterminetRechargeDelegate = new BeginOperationDelegate(this.OnBeginDeterminetRecharge);
            }
            if ((this.onEndDeterminetRechargeDelegate == null)) {
                this.onEndDeterminetRechargeDelegate = new EndOperationDelegate(this.OnEndDeterminetRecharge);
            }
            if ((this.onDeterminetRechargeCompletedDelegate == null)) {
                this.onDeterminetRechargeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeterminetRechargeCompleted);
            }
            base.InvokeAsync(this.onBeginDeterminetRechargeDelegate, new object[] {
                        rechargeId,
                        card,
                        name,
                        bank,
                        token}, this.onEndDeterminetRechargeDelegate, this.onDeterminetRechargeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginNegativeRecharge(int rechargeId, string remark, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNegativeRecharge(rechargeId, remark, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.OperateResult IWorld.Admin.Framework.DataReportService.IDataReportService.EndNegativeRecharge(System.IAsyncResult result) {
            return base.Channel.EndNegativeRecharge(result);
        }
        
        private System.IAsyncResult OnBeginNegativeRecharge(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int rechargeId = ((int)(inValues[0]));
            string remark = ((string)(inValues[1]));
            string token = ((string)(inValues[2]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginNegativeRecharge(rechargeId, remark, token, callback, asyncState);
        }
        
        private object[] OnEndNegativeRecharge(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.OperateResult retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndNegativeRecharge(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNegativeRechargeCompleted(object state) {
            if ((this.NegativeRechargeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NegativeRechargeCompleted(this, new NegativeRechargeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NegativeRechargeAsync(int rechargeId, string remark, string token) {
            this.NegativeRechargeAsync(rechargeId, remark, token, null);
        }
        
        public void NegativeRechargeAsync(int rechargeId, string remark, string token, object userState) {
            if ((this.onBeginNegativeRechargeDelegate == null)) {
                this.onBeginNegativeRechargeDelegate = new BeginOperationDelegate(this.OnBeginNegativeRecharge);
            }
            if ((this.onEndNegativeRechargeDelegate == null)) {
                this.onEndNegativeRechargeDelegate = new EndOperationDelegate(this.OnEndNegativeRecharge);
            }
            if ((this.onNegativeRechargeCompletedDelegate == null)) {
                this.onNegativeRechargeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNegativeRechargeCompleted);
            }
            base.InvokeAsync(this.onBeginNegativeRechargeDelegate, new object[] {
                        rechargeId,
                        remark,
                        token}, this.onEndNegativeRechargeDelegate, this.onNegativeRechargeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetWithdrawalList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.WithdrawalsStatusSelectType status, int userId, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWithdrawalList(beginTime, endTime, status, userId, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.PaginationListOfWithdrawalResultp9CVq9mK IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetWithdrawalList(System.IAsyncResult result) {
            return base.Channel.EndGetWithdrawalList(result);
        }
        
        private System.IAsyncResult OnBeginGetWithdrawalList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string beginTime = ((string)(inValues[0]));
            string endTime = ((string)(inValues[1]));
            IWorld.Admin.Framework.DataReportService.WithdrawalsStatusSelectType status = ((IWorld.Admin.Framework.DataReportService.WithdrawalsStatusSelectType)(inValues[2]));
            int userId = ((int)(inValues[3]));
            int page = ((int)(inValues[4]));
            string token = ((string)(inValues[5]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetWithdrawalList(beginTime, endTime, status, userId, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetWithdrawalList(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.PaginationListOfWithdrawalResultp9CVq9mK retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetWithdrawalList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWithdrawalListCompleted(object state) {
            if ((this.GetWithdrawalListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWithdrawalListCompleted(this, new GetWithdrawalListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWithdrawalListAsync(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.WithdrawalsStatusSelectType status, int userId, int page, string token) {
            this.GetWithdrawalListAsync(beginTime, endTime, status, userId, page, token, null);
        }
        
        public void GetWithdrawalListAsync(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.WithdrawalsStatusSelectType status, int userId, int page, string token, object userState) {
            if ((this.onBeginGetWithdrawalListDelegate == null)) {
                this.onBeginGetWithdrawalListDelegate = new BeginOperationDelegate(this.OnBeginGetWithdrawalList);
            }
            if ((this.onEndGetWithdrawalListDelegate == null)) {
                this.onEndGetWithdrawalListDelegate = new EndOperationDelegate(this.OnEndGetWithdrawalList);
            }
            if ((this.onGetWithdrawalListCompletedDelegate == null)) {
                this.onGetWithdrawalListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWithdrawalListCompleted);
            }
            base.InvokeAsync(this.onBeginGetWithdrawalListDelegate, new object[] {
                        beginTime,
                        endTime,
                        status,
                        userId,
                        page,
                        token}, this.onEndGetWithdrawalListDelegate, this.onGetWithdrawalListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetUntreatedWithdrawalCount(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUntreatedWithdrawalCount(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.UntreatedWithdrawalCountResult IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetUntreatedWithdrawalCount(System.IAsyncResult result) {
            return base.Channel.EndGetUntreatedWithdrawalCount(result);
        }
        
        private System.IAsyncResult OnBeginGetUntreatedWithdrawalCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetUntreatedWithdrawalCount(token, callback, asyncState);
        }
        
        private object[] OnEndGetUntreatedWithdrawalCount(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.UntreatedWithdrawalCountResult retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetUntreatedWithdrawalCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUntreatedWithdrawalCountCompleted(object state) {
            if ((this.GetUntreatedWithdrawalCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUntreatedWithdrawalCountCompleted(this, new GetUntreatedWithdrawalCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUntreatedWithdrawalCountAsync(string token) {
            this.GetUntreatedWithdrawalCountAsync(token, null);
        }
        
        public void GetUntreatedWithdrawalCountAsync(string token, object userState) {
            if ((this.onBeginGetUntreatedWithdrawalCountDelegate == null)) {
                this.onBeginGetUntreatedWithdrawalCountDelegate = new BeginOperationDelegate(this.OnBeginGetUntreatedWithdrawalCount);
            }
            if ((this.onEndGetUntreatedWithdrawalCountDelegate == null)) {
                this.onEndGetUntreatedWithdrawalCountDelegate = new EndOperationDelegate(this.OnEndGetUntreatedWithdrawalCount);
            }
            if ((this.onGetUntreatedWithdrawalCountCompletedDelegate == null)) {
                this.onGetUntreatedWithdrawalCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUntreatedWithdrawalCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetUntreatedWithdrawalCountDelegate, new object[] {
                        token}, this.onEndGetUntreatedWithdrawalCountDelegate, this.onGetUntreatedWithdrawalCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginDeterminetWithdrawal(int withdrawalId, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeterminetWithdrawal(withdrawalId, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.OperateResult IWorld.Admin.Framework.DataReportService.IDataReportService.EndDeterminetWithdrawal(System.IAsyncResult result) {
            return base.Channel.EndDeterminetWithdrawal(result);
        }
        
        private System.IAsyncResult OnBeginDeterminetWithdrawal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int withdrawalId = ((int)(inValues[0]));
            string token = ((string)(inValues[1]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginDeterminetWithdrawal(withdrawalId, token, callback, asyncState);
        }
        
        private object[] OnEndDeterminetWithdrawal(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.OperateResult retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndDeterminetWithdrawal(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeterminetWithdrawalCompleted(object state) {
            if ((this.DeterminetWithdrawalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeterminetWithdrawalCompleted(this, new DeterminetWithdrawalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeterminetWithdrawalAsync(int withdrawalId, string token) {
            this.DeterminetWithdrawalAsync(withdrawalId, token, null);
        }
        
        public void DeterminetWithdrawalAsync(int withdrawalId, string token, object userState) {
            if ((this.onBeginDeterminetWithdrawalDelegate == null)) {
                this.onBeginDeterminetWithdrawalDelegate = new BeginOperationDelegate(this.OnBeginDeterminetWithdrawal);
            }
            if ((this.onEndDeterminetWithdrawalDelegate == null)) {
                this.onEndDeterminetWithdrawalDelegate = new EndOperationDelegate(this.OnEndDeterminetWithdrawal);
            }
            if ((this.onDeterminetWithdrawalCompletedDelegate == null)) {
                this.onDeterminetWithdrawalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeterminetWithdrawalCompleted);
            }
            base.InvokeAsync(this.onBeginDeterminetWithdrawalDelegate, new object[] {
                        withdrawalId,
                        token}, this.onEndDeterminetWithdrawalDelegate, this.onDeterminetWithdrawalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginNegativeWithdrawal(int withdrawalId, string remark, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNegativeWithdrawal(withdrawalId, remark, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.OperateResult IWorld.Admin.Framework.DataReportService.IDataReportService.EndNegativeWithdrawal(System.IAsyncResult result) {
            return base.Channel.EndNegativeWithdrawal(result);
        }
        
        private System.IAsyncResult OnBeginNegativeWithdrawal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int withdrawalId = ((int)(inValues[0]));
            string remark = ((string)(inValues[1]));
            string token = ((string)(inValues[2]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginNegativeWithdrawal(withdrawalId, remark, token, callback, asyncState);
        }
        
        private object[] OnEndNegativeWithdrawal(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.OperateResult retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndNegativeWithdrawal(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNegativeWithdrawalCompleted(object state) {
            if ((this.NegativeWithdrawalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NegativeWithdrawalCompleted(this, new NegativeWithdrawalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NegativeWithdrawalAsync(int withdrawalId, string remark, string token) {
            this.NegativeWithdrawalAsync(withdrawalId, remark, token, null);
        }
        
        public void NegativeWithdrawalAsync(int withdrawalId, string remark, string token, object userState) {
            if ((this.onBeginNegativeWithdrawalDelegate == null)) {
                this.onBeginNegativeWithdrawalDelegate = new BeginOperationDelegate(this.OnBeginNegativeWithdrawal);
            }
            if ((this.onEndNegativeWithdrawalDelegate == null)) {
                this.onEndNegativeWithdrawalDelegate = new EndOperationDelegate(this.OnEndNegativeWithdrawal);
            }
            if ((this.onNegativeWithdrawalCompletedDelegate == null)) {
                this.onNegativeWithdrawalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNegativeWithdrawalCompleted);
            }
            base.InvokeAsync(this.onBeginNegativeWithdrawalDelegate, new object[] {
                        withdrawalId,
                        remark,
                        token}, this.onEndNegativeWithdrawalDelegate, this.onNegativeWithdrawalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginGetTransferList(string beginTime, string endTime, int userId, int page, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTransferList(beginTime, endTime, userId, page, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.PaginationListOfTransferResultp9CVq9mK IWorld.Admin.Framework.DataReportService.IDataReportService.EndGetTransferList(System.IAsyncResult result) {
            return base.Channel.EndGetTransferList(result);
        }
        
        private System.IAsyncResult OnBeginGetTransferList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string beginTime = ((string)(inValues[0]));
            string endTime = ((string)(inValues[1]));
            int userId = ((int)(inValues[2]));
            int page = ((int)(inValues[3]));
            string token = ((string)(inValues[4]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginGetTransferList(beginTime, endTime, userId, page, token, callback, asyncState);
        }
        
        private object[] OnEndGetTransferList(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.PaginationListOfTransferResultp9CVq9mK retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndGetTransferList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTransferListCompleted(object state) {
            if ((this.GetTransferListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTransferListCompleted(this, new GetTransferListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTransferListAsync(string beginTime, string endTime, int userId, int page, string token) {
            this.GetTransferListAsync(beginTime, endTime, userId, page, token, null);
        }
        
        public void GetTransferListAsync(string beginTime, string endTime, int userId, int page, string token, object userState) {
            if ((this.onBeginGetTransferListDelegate == null)) {
                this.onBeginGetTransferListDelegate = new BeginOperationDelegate(this.OnBeginGetTransferList);
            }
            if ((this.onEndGetTransferListDelegate == null)) {
                this.onEndGetTransferListDelegate = new EndOperationDelegate(this.OnEndGetTransferList);
            }
            if ((this.onGetTransferListCompletedDelegate == null)) {
                this.onGetTransferListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTransferListCompleted);
            }
            base.InvokeAsync(this.onBeginGetTransferListDelegate, new object[] {
                        beginTime,
                        endTime,
                        userId,
                        page,
                        token}, this.onEndGetTransferListDelegate, this.onGetTransferListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult IWorld.Admin.Framework.DataReportService.IDataReportService.BeginAddTransfer(double sum, string remark, string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTransfer(sum, remark, token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        IWorld.Admin.Framework.DataReportService.OperateResult IWorld.Admin.Framework.DataReportService.IDataReportService.EndAddTransfer(System.IAsyncResult result) {
            return base.Channel.EndAddTransfer(result);
        }
        
        private System.IAsyncResult OnBeginAddTransfer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double sum = ((double)(inValues[0]));
            string remark = ((string)(inValues[1]));
            string token = ((string)(inValues[2]));
            return ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).BeginAddTransfer(sum, remark, token, callback, asyncState);
        }
        
        private object[] OnEndAddTransfer(System.IAsyncResult result) {
            IWorld.Admin.Framework.DataReportService.OperateResult retVal = ((IWorld.Admin.Framework.DataReportService.IDataReportService)(this)).EndAddTransfer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTransferCompleted(object state) {
            if ((this.AddTransferCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTransferCompleted(this, new AddTransferCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTransferAsync(double sum, string remark, string token) {
            this.AddTransferAsync(sum, remark, token, null);
        }
        
        public void AddTransferAsync(double sum, string remark, string token, object userState) {
            if ((this.onBeginAddTransferDelegate == null)) {
                this.onBeginAddTransferDelegate = new BeginOperationDelegate(this.OnBeginAddTransfer);
            }
            if ((this.onEndAddTransferDelegate == null)) {
                this.onEndAddTransferDelegate = new EndOperationDelegate(this.OnEndAddTransfer);
            }
            if ((this.onAddTransferCompletedDelegate == null)) {
                this.onAddTransferCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTransferCompleted);
            }
            base.InvokeAsync(this.onBeginAddTransferDelegate, new object[] {
                        sum,
                        remark,
                        token}, this.onEndAddTransferDelegate, this.onAddTransferCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override IWorld.Admin.Framework.DataReportService.IDataReportService CreateChannel() {
            return new DataReportServiceClientChannel(this);
        }
        
        private class DataReportServiceClientChannel : ChannelBase<IWorld.Admin.Framework.DataReportService.IDataReportService>, IWorld.Admin.Framework.DataReportService.IDataReportService {
            
            public DataReportServiceClientChannel(System.ServiceModel.ClientBase<IWorld.Admin.Framework.DataReportService.IDataReportService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetComprehensiveInformation(string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetComprehensiveInformation", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.ComprehensiveInformationResult EndGetComprehensiveInformation(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.ComprehensiveInformationResult _result = ((IWorld.Admin.Framework.DataReportService.ComprehensiveInformationResult)(base.EndInvoke("GetComprehensiveInformation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSiteDataList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = beginTime;
                _args[1] = endTime;
                _args[2] = timePeriod;
                _args[3] = page;
                _args[4] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetSiteDataList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.PaginationListOfSiteDataResultp9CVq9mK EndGetSiteDataList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.PaginationListOfSiteDataResultp9CVq9mK _result = ((IWorld.Admin.Framework.DataReportService.PaginationListOfSiteDataResultp9CVq9mK)(base.EndInvoke("GetSiteDataList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPersonalDataList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.TimePeriodSelectType timePeriod, int userId, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = beginTime;
                _args[1] = endTime;
                _args[2] = timePeriod;
                _args[3] = userId;
                _args[4] = page;
                _args[5] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetPersonalDataList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.PaginationListOfPersonalDataResultp9CVq9mK EndGetPersonalDataList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.PaginationListOfPersonalDataResultp9CVq9mK _result = ((IWorld.Admin.Framework.DataReportService.PaginationListOfPersonalDataResultp9CVq9mK)(base.EndInvoke("GetPersonalDataList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetBettingList(string beginTime, string endTime, int ownerId, int ticketId, int tagId, int howToPlatId, IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = beginTime;
                _args[1] = endTime;
                _args[2] = ownerId;
                _args[3] = ticketId;
                _args[4] = tagId;
                _args[5] = howToPlatId;
                _args[6] = status;
                _args[7] = page;
                _args[8] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetBettingList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.PaginationListOfBettingResultp9CVq9mK EndGetBettingList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.PaginationListOfBettingResultp9CVq9mK _result = ((IWorld.Admin.Framework.DataReportService.PaginationListOfBettingResultp9CVq9mK)(base.EndInvoke("GetBettingList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetChasingList(string beginTime, string endTime, int ownerId, int ticketId, int tagId, int howToPlatId, IWorld.Admin.Framework.DataReportService.ChasingStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = beginTime;
                _args[1] = endTime;
                _args[2] = ownerId;
                _args[3] = ticketId;
                _args[4] = tagId;
                _args[5] = howToPlatId;
                _args[6] = status;
                _args[7] = page;
                _args[8] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetChasingList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.PaginationListOfChasingResultp9CVq9mK EndGetChasingList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.PaginationListOfChasingResultp9CVq9mK _result = ((IWorld.Admin.Framework.DataReportService.PaginationListOfChasingResultp9CVq9mK)(base.EndInvoke("GetChasingList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetBettingForChasingList(int chasingId, IWorld.Admin.Framework.DataReportService.BettingStatusSelectType status, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = chasingId;
                _args[1] = status;
                _args[2] = page;
                _args[3] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetBettingForChasingList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.PaginationListOfBettingForChasingResultp9CVq9mK EndGetBettingForChasingList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.PaginationListOfBettingForChasingResultp9CVq9mK _result = ((IWorld.Admin.Framework.DataReportService.PaginationListOfBettingForChasingResultp9CVq9mK)(base.EndInvoke("GetBettingForChasingList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRechargeList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.RechargeStatusSelectType status, int userId, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = beginTime;
                _args[1] = endTime;
                _args[2] = status;
                _args[3] = userId;
                _args[4] = page;
                _args[5] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetRechargeList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.PaginationListOfRechargeResultp9CVq9mK EndGetRechargeList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.PaginationListOfRechargeResultp9CVq9mK _result = ((IWorld.Admin.Framework.DataReportService.PaginationListOfRechargeResultp9CVq9mK)(base.EndInvoke("GetRechargeList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUntreatedRecharCount(string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetUntreatedRecharCount", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.UntreatedRecharCountResult EndGetUntreatedRecharCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.UntreatedRecharCountResult _result = ((IWorld.Admin.Framework.DataReportService.UntreatedRecharCountResult)(base.EndInvoke("GetUntreatedRecharCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeterminetRecharge(int rechargeId, string card, string name, IWorld.Admin.Framework.DataReportService.Bank bank, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = rechargeId;
                _args[1] = card;
                _args[2] = name;
                _args[3] = bank;
                _args[4] = token;
                System.IAsyncResult _result = base.BeginInvoke("DeterminetRecharge", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.OperateResult EndDeterminetRecharge(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.OperateResult _result = ((IWorld.Admin.Framework.DataReportService.OperateResult)(base.EndInvoke("DeterminetRecharge", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNegativeRecharge(int rechargeId, string remark, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = rechargeId;
                _args[1] = remark;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("NegativeRecharge", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.OperateResult EndNegativeRecharge(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.OperateResult _result = ((IWorld.Admin.Framework.DataReportService.OperateResult)(base.EndInvoke("NegativeRecharge", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWithdrawalList(string beginTime, string endTime, IWorld.Admin.Framework.DataReportService.WithdrawalsStatusSelectType status, int userId, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = beginTime;
                _args[1] = endTime;
                _args[2] = status;
                _args[3] = userId;
                _args[4] = page;
                _args[5] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetWithdrawalList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.PaginationListOfWithdrawalResultp9CVq9mK EndGetWithdrawalList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.PaginationListOfWithdrawalResultp9CVq9mK _result = ((IWorld.Admin.Framework.DataReportService.PaginationListOfWithdrawalResultp9CVq9mK)(base.EndInvoke("GetWithdrawalList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUntreatedWithdrawalCount(string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetUntreatedWithdrawalCount", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.UntreatedWithdrawalCountResult EndGetUntreatedWithdrawalCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.UntreatedWithdrawalCountResult _result = ((IWorld.Admin.Framework.DataReportService.UntreatedWithdrawalCountResult)(base.EndInvoke("GetUntreatedWithdrawalCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeterminetWithdrawal(int withdrawalId, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = withdrawalId;
                _args[1] = token;
                System.IAsyncResult _result = base.BeginInvoke("DeterminetWithdrawal", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.OperateResult EndDeterminetWithdrawal(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.OperateResult _result = ((IWorld.Admin.Framework.DataReportService.OperateResult)(base.EndInvoke("DeterminetWithdrawal", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNegativeWithdrawal(int withdrawalId, string remark, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = withdrawalId;
                _args[1] = remark;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("NegativeWithdrawal", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.OperateResult EndNegativeWithdrawal(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.OperateResult _result = ((IWorld.Admin.Framework.DataReportService.OperateResult)(base.EndInvoke("NegativeWithdrawal", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTransferList(string beginTime, string endTime, int userId, int page, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = beginTime;
                _args[1] = endTime;
                _args[2] = userId;
                _args[3] = page;
                _args[4] = token;
                System.IAsyncResult _result = base.BeginInvoke("GetTransferList", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.PaginationListOfTransferResultp9CVq9mK EndGetTransferList(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.PaginationListOfTransferResultp9CVq9mK _result = ((IWorld.Admin.Framework.DataReportService.PaginationListOfTransferResultp9CVq9mK)(base.EndInvoke("GetTransferList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddTransfer(double sum, string remark, string token, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = sum;
                _args[1] = remark;
                _args[2] = token;
                System.IAsyncResult _result = base.BeginInvoke("AddTransfer", _args, callback, asyncState);
                return _result;
            }
            
            public IWorld.Admin.Framework.DataReportService.OperateResult EndAddTransfer(System.IAsyncResult result) {
                object[] _args = new object[0];
                IWorld.Admin.Framework.DataReportService.OperateResult _result = ((IWorld.Admin.Framework.DataReportService.OperateResult)(base.EndInvoke("AddTransfer", _args, result)));
                return _result;
            }
        }
    }
}
